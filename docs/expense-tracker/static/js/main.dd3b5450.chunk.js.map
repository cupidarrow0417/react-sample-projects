{"version":3,"sources":["utils/expenses.js","utils/currency.js","components/transactionHistory/transactionHistory.js","components/totalBalance/totalBalance.js","components/addTransaction/addTransaction.js","App.js","serviceWorker.js","index.js"],"names":["STORE_KEY","updateDataStore","items","localStorage","setItem","JSON","stringify","helpers","get","getItem","parse","update","data","clear","lang","window","navigator","userLanguage","language","currency","currencyMap","components","split","length","pop","getCountryCode","foramatter","Intl","NumberFormat","style","formatNumber","number","format","TransactionHistory","props","id","className","transactions","map","transaction","i","key","amount","label","Math","abs","onClick","e","removeTransactionHandler","TotalBalance","useState","total","credit","debit","balance","setBalance","useEffect","amounts","newBalance","reduce","acc","item","toFixed","filter","updateBalance","AddTransaction","setLabel","setAmount","onSubmit","preventDefault","newTransaction","floor","random","newTransactions","updateTransactionHandler","htmlFor","type","required","value","onChange","target","trim","placeholder","App","expenses","setTransactions","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qgGAAMA,G,MAAY,uBAElB,SAASC,IAA6B,IAAbC,EAAY,uDAAJ,GAC/BC,aAAaC,QAAQJ,EAAWK,KAAKC,UAAUJ,IAYjD,IAMeK,EANC,CACdC,IANF,WACE,IAAMN,EAJCC,aAAaM,QAAQT,GAK5B,OAAOE,EAAQG,KAAKK,MAAMR,GAAS,IAKnCS,OAAQ,SAACC,GAAD,OAAUX,EAAgBW,IAClCC,MAAO,kBAAMZ,M,eCjBTa,EACJC,OAAOC,UAAUC,cAAgBF,OAAOC,UAAUE,UAAY,QAc1DC,EAAWC,EAZM,WACrB,IAAIC,EAAaP,EAAKQ,MAAM,KAC5B,OAA0B,IAAtBD,EAAWE,QAIW,KAD1BF,EAAaP,EAAKQ,MAAM,MACTC,OAHNF,EAAWG,MAMbV,EAGoBW,IACvBC,EAAa,IAAIC,KAAKC,aAAad,EAAM,CAC7Ce,MAAO,WACPV,aAKaW,EAFM,SAACC,GAAD,OAAYL,EAAWM,OAAOD,ICgBpCE,EAjCY,SAACC,GAC1B,OACE,6BACE,uCACA,wBAAIC,GAAG,OAAOC,UAAU,QACrBF,EAAMG,aAAaC,KAAI,SAACC,EAAaC,GAAd,OACtB,wBACEC,IAAKF,EAAYJ,GACjBC,UAAWG,EAAYG,OAAS,EAAI,QAAU,QAE7CH,EAAYI,MACb,8BACGJ,EAAYG,OAAS,EAAI,IAAM,IAC/BZ,EAAac,KAAKC,IAAIN,EAAYG,UAErC,4BACEN,UAAU,aACVU,QAAS,SAACC,GAAD,OAAOb,EAAMc,yBAAyBT,EAAYJ,MAF7D,YCsDGc,G,MArEM,SAACf,GAAW,IAAD,EACAgB,mBAAS,CACrCC,MAAO,EACPC,OAAQ,EACRC,MAAO,IAJqB,mBACvBC,EADuB,KACdC,EADc,KA0C9B,OAnCAC,qBAAU,YACc,WACpB,IAAMC,EAAUvB,EAAMG,aAAaC,KACjC,SAACC,GAAD,OAAiBA,EAAYG,UAEzBgB,EAAa,CACjBP,MAAO,EACPC,OAAQ,EACRC,MAAO,GAGTK,EAAWP,MAAQM,EAChBE,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,IAAO,GACrCC,QAAQ,GAEXJ,EAAWN,OAASK,EACjBM,QAAO,SAACF,GAAD,OAAUA,EAAO,KACxBF,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,IAAO,GACrCC,QAAQ,GAEXJ,EAAWL,QAGqC,EAF9CI,EACGM,QAAO,SAACF,GAAD,OAAUA,EAAO,KACxBF,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,IAAO,IACxCC,QAAQ,GAEVP,EAAW,CACTJ,MAAOrB,EAAa4B,EAAWP,OAC/BC,OAAQtB,EAAa4B,EAAWN,QAChCC,MAAOvB,EAAa4B,EAAWL,SAGnCW,KACC,CAAC9B,EAAMG,eAGR,6BACE,4CACA,wBAAIF,GAAG,4BAA4BmB,EAAQH,OAE3C,yBAAKf,UAAU,qBACb,6BACE,sCACA,uBAAGD,GAAG,aAAaC,UAAU,cAC1BkB,EAAQF,SAGb,6BACE,uCACA,uBAAGjB,GAAG,cAAcC,UAAU,eAC3BkB,EAAQD,Y,OCONY,G,MAjEQ,SAAC/B,GAAW,IAAD,EACNgB,mBAAS,IADH,mBACzBP,EADyB,KAClBuB,EADkB,OAEJhB,mBAAS,IAFL,mBAEzBR,EAFyB,KAEjByB,EAFiB,KAyBhC,OACE,6BACE,mDACA,0BAAMhC,GAAG,OAAOiC,SApBpB,SAA+BrB,GAC7BA,EAAEsB,iBAEF,IAAMC,EAAiB,CACrBnC,GAPKS,KAAK2B,MAAsB,IAAhB3B,KAAK4B,UAQrB7B,QACAD,QAASA,GAGL+B,EAAe,sBAAOvC,EAAMG,cAAb,CAA2BiC,IAEhDpC,EAAMwC,yBAAyBD,GAE/BP,EAAS,IACTC,EAAU,MAON,yBAAK/B,UAAU,gBACb,2BAAOuC,QAAQ,QAAf,SACA,2BACEC,KAAK,OACLzC,GAAG,OACH0C,UAAQ,EACRC,MAAOnC,EACPoC,SAAU,SAAChC,GAAD,OAAOmB,EAASnB,EAAEiC,OAAOF,MAAMG,SACzCC,YAAY,oBAGhB,yBAAK9C,UAAU,gBACb,2BAAOuC,QAAQ,UAAf,UACS,6BADT,2CAIA,2BACEC,KAAK,SACLzC,GAAG,SACH0C,UAAQ,EACRC,MAAOpC,EACPqC,SAAU,SAAChC,GAAD,OAAOoB,EAAUpB,EAAEiC,OAAOF,QACpCI,YAAY,qBAGhB,4BAAQ9C,UAAU,OAAlB,uBCZO+C,MAvCf,WAAgB,IAAD,EAC2BjC,mBAASkC,EAAS5E,OAD7C,mBACN6B,EADM,KACQgD,EADR,KAGb,SAASX,EAAyBrC,GAChC+C,EAASzE,OAAO0B,GAChBgD,EAAgBD,EAAS5E,OAY3B,OACE,yBAAK4B,UAAU,OACb,+CAEA,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAcC,aAAcA,IAE5B,kBAAC,EAAD,CACEA,aAAcA,EACdqC,yBAA0BA,KAG9B,yBAAKtC,UAAU,mBACb,kBAAC,EAAD,CACEC,aAAcA,EACdW,yBAvBR,SAAkCb,GAKhCuC,EAJwBrC,EAAa0B,QACnC,SAACxB,GAAD,OAAiBA,EAAYJ,KAAOA,YCNtBmD,QACW,cAA7BvE,OAAOwE,SAASC,UAEe,UAA7BzE,OAAOwE,SAASC,UAEhBzE,OAAOwE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB9E,WACrBA,UAAU+E,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dd3b5450.chunk.js","sourcesContent":["const STORE_KEY = 'expenseTransactions';\n\nfunction updateDataStore(items = []) {\n  localStorage.setItem(STORE_KEY, JSON.stringify(items));\n}\n\nfunction getFromDataStore() {\n  return localStorage.getItem(STORE_KEY);\n}\n\nfunction get() {\n  const items = getFromDataStore();\n  return items ? JSON.parse(items) : [];\n}\n\nconst helpers = {\n  get,\n  update: (data) => updateDataStore(data),\n  clear: () => updateDataStore(),\n};\n\nexport default helpers;\n","import currencyMap from './currencyMap.json';\nconst lang =\n  window.navigator.userLanguage || window.navigator.language || 'en-IN';\n\nconst getCountryCode = () => {\n  let components = lang.split('_');\n  if (components.length === 2) {\n    return components.pop();\n  }\n  components = lang.split('-');\n  if (components.length === 2) {\n    return components.pop();\n  }\n  return lang;\n};\n\nconst currency = currencyMap[getCountryCode()];\nconst foramatter = new Intl.NumberFormat(lang, {\n  style: 'currency',\n  currency,\n});\n\nconst formatNumber = (number) => foramatter.format(number);\n\nexport default formatNumber;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './transactionHistory.css';\nimport formatNumber from '../../utils/currency';\n\nconst TransactionHistory = (props) => {\n  return (\n    <div>\n      <h3>History</h3>\n      <ul id=\"list\" className=\"list\">\n        {props.transactions.map((transaction, i) => (\n          <li\n            key={transaction.id}\n            className={transaction.amount < 0 ? 'minus' : 'plus'}\n          >\n            {transaction.label}\n            <span>\n              {transaction.amount < 0 ? '-' : '+'}\n              {formatNumber(Math.abs(transaction.amount))}\n            </span>\n            <button\n              className=\"delete-btn\"\n              onClick={(e) => props.removeTransactionHandler(transaction.id)}\n            >\n              x\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nTransactionHistory.propTypes = {\n  transactions: PropTypes.array.isRequired,\n  removeTransactionHandler: PropTypes.func.isRequired,\n};\n\nexport default TransactionHistory;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './totalBalance.css';\nimport formatNumber from '../../utils/currency';\n\nconst TotalBalance = (props) => {\n  const [balance, setBalance] = useState({\n    total: 0,\n    credit: 0,\n    debit: 0,\n  });\n\n  useEffect(() => {\n    const updateBalance = () => {\n      const amounts = props.transactions.map(\n        (transaction) => transaction.amount\n      );\n      const newBalance = {\n        total: 0,\n        credit: 0,\n        debit: 0,\n      };\n\n      newBalance.total = amounts\n        .reduce((acc, item) => (acc += item), 0)\n        .toFixed(2);\n\n      newBalance.credit = amounts\n        .filter((item) => item > 0)\n        .reduce((acc, item) => (acc += item), 0)\n        .toFixed(2);\n\n      newBalance.debit = (\n        amounts\n          .filter((item) => item < 0)\n          .reduce((acc, item) => (acc += item), 0) * -1\n      ).toFixed(2);\n\n      setBalance({\n        total: formatNumber(newBalance.total),\n        credit: formatNumber(newBalance.credit),\n        debit: formatNumber(newBalance.debit),\n      });\n    };\n    updateBalance();\n  }, [props.transactions]);\n\n  return (\n    <div>\n      <h4>Your Balance</h4>\n      <h1 id=\"balremoveTransactionance\">{balance.total}</h1>\n\n      <div className=\"inc-exp-container\">\n        <div>\n          <h4>Income</h4>\n          <p id=\"money-plus\" className=\"money plus\">\n            {balance.credit}\n          </p>\n        </div>\n        <div>\n          <h4>Expense</h4>\n          <p id=\"money-minus\" className=\"money minus\">\n            {balance.debit}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTotalBalance.propTypes = {\n  transactions: PropTypes.array.isRequired,\n};\n\nexport default TotalBalance;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './addTransaction.css';\n\nconst AddTransaction = (props) => {\n  const [label, setLabel] = useState('');\n  const [amount, setAmount] = useState('');\n\n  function generateID() {\n    return Math.floor(Math.random() * 100000000);\n  }\n\n  function addTransactionHandler(e) {\n    e.preventDefault();\n\n    const newTransaction = {\n      id: generateID(),\n      label,\n      amount: +amount,\n    };\n\n    const newTransactions = [...props.transactions, newTransaction];\n\n    props.updateTransactionHandler(newTransactions);\n\n    setLabel('');\n    setAmount('');\n  }\n\n  return (\n    <div>\n      <h3>Add new transaction</h3>\n      <form id=\"form\" onSubmit={addTransactionHandler}>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Label</label>\n          <input\n            type=\"text\"\n            id=\"text\"\n            required\n            value={label}\n            onChange={(e) => setLabel(e.target.value.trim())}\n            placeholder=\"Enter label...\"\n          />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"amount\">\n            Amount <br />\n            (negative - expense, positive - income)\n          </label>\n          <input\n            type=\"number\"\n            id=\"amount\"\n            required\n            value={amount}\n            onChange={(e) => setAmount(e.target.value)}\n            placeholder=\"Enter amount...\"\n          />\n        </div>\n        <button className=\"btn\">Add transaction</button>\n      </form>\n    </div>\n  );\n};\n\nAddTransaction.propTypes = {\n  transactions: PropTypes.array.isRequired,\n  updateTransactionHandler: PropTypes.func.isRequired,\n};\n\nexport default AddTransaction;\n","import React, { useState } from 'react';\nimport './App.css';\nimport expenses from './utils/expenses';\nimport TransactionHistory from './components/transactionHistory/transactionHistory';\nimport TotalBalance from './components/totalBalance/totalBalance';\nimport AddTransaction from './components/addTransaction/addTransaction';\n\nfunction App() {\n  const [transactions, setTransactions] = useState(expenses.get());\n\n  function updateTransactionHandler(transactions) {\n    expenses.update(transactions);\n    setTransactions(expenses.get());\n  }\n\n  // Remove transaction by ID\n  function removeTransactionHandler(id) {\n    const newTransactions = transactions.filter(\n      (transaction) => transaction.id !== id\n    );\n\n    updateTransactionHandler(newTransactions);\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Expense Tracker</h2>\n\n      <div className=\"container left\">\n        <TotalBalance transactions={transactions} />\n\n        <AddTransaction\n          transactions={transactions}\n          updateTransactionHandler={updateTransactionHandler}\n        />\n      </div>\n      <div className=\"container right\">\n        <TransactionHistory\n          transactions={transactions}\n          removeTransactionHandler={removeTransactionHandler}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}