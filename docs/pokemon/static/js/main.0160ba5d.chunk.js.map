{"version":3,"sources":["graphql/index.js","components/Pokemon.js","components/PokemonWrapper.js","components/PokemonDetail.js","App.js","reportWebVitals.js","index.js"],"names":["GET_POKEMONS","gql","GET_POKEMON_DETAILS","Pokemon","pokemon","britishNumberFormatter","Intl","NumberFormat","className","name","format","maxHP","maxCP","src","image","alt","attacks","special","slice","map","attack","damage","PokemonWrapper","useQuery","variables","first","loading","error","data","pokemons","to","id","PokemonDetail","params","useParams","history","useHistory","onClick","goBack","classification","resistant","index","weaknesses","join","fast","f","s","App","client","ApolloClient","uri","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAEaA,EAAeC,YAAH,gQAkBZC,EAAsBD,YAAH,8pB,OClBnBE,EAAU,SAAC,GAAiB,IAAD,EAAdC,EAAc,EAAdA,QAClBC,EAAyB,IAAIC,KAAKC,aAAa,SAErD,OACE,sBAAKC,UAAU,UAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,4BAAIJ,EAAQK,SAEd,sBAAKD,UAAU,gBAAf,UACE,+BAAOH,EAAuBK,OAAON,EAAQO,SAC7C,+BAAON,EAAuBK,OAAON,EAAQQ,YAE/C,qBAAKJ,UAAU,iBAAf,SACE,qBAAKK,IAAKT,EAAQU,MAAOC,IAAKX,EAAQK,SAExC,qBAAKD,UAAU,mBAAf,gBACGJ,QADH,IACGA,GADH,UACGA,EAASY,eADZ,aACG,EAAkBC,QAAQC,MAAM,EAAG,GAAGC,KAAI,SAACC,GAAD,OACzC,+BAA+CA,EAAOX,MAAtD,UAAcW,EAAOX,KAArB,YAA6BW,EAAOC,kBCZjCC,EAAiB,WAAO,IAAD,IACDC,mBAASvB,EAAc,CACtDwB,UAAW,CAAEC,MAAO,MADdC,EAD0B,EAC1BA,QAASC,EADiB,EACjBA,MAAOC,EADU,EACVA,KAIxB,OAAIF,EAAgB,4CAChBC,EAAc,8BAAMA,IAGtB,qBAAKnB,UAAU,qBAAf,gBACGoB,QADH,IACGA,GADH,UACGA,EAAMC,gBADT,aACG,EAAgBV,KAAI,SAACf,GAAD,OACnB,cAAC,IAAD,CAAuB0B,GAAE,mBAAc1B,EAAQ2B,IAA/C,SACE,cAAC,EAAD,CAAS3B,QAASA,KADTA,EAAQ2B,UCbdC,EAAgB,WAAO,IAAD,gBAC3B3B,EAAyB,IAAIC,KAAKC,aAAa,SAC/C0B,EAASC,cACTC,EAAUC,cAHiB,EAKAb,mBAASrB,EAAqB,CAC7DsB,UAAW,CAAEO,GAAIE,EAAOF,MADlBL,EALyB,EAKzBA,QAASC,EALgB,EAKhBA,MAAOC,EALS,EAKTA,KAQxB,OAAIF,EAAgB,4CAChBC,EAAc,8BAAMA,IAGtB,sBAAKnB,UAAU,gBAAf,UACE,wBAAQ6B,QATG,WACbF,EAAQG,UAQN,mBACA,sBAAK9B,UAAU,UAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,oCAAKoB,QAAL,IAAKA,OAAL,EAAKA,EAAMxB,QAAQK,SAErB,yDAAqBmB,QAArB,IAAqBA,OAArB,EAAqBA,EAAMxB,QAAQmC,kBACnC,sBAAK/B,UAAU,gBAAf,UACE,2CACUH,EAAuBK,OAAvB,OAA8BkB,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMxB,QAAQO,OADtD,WAGA,2CACUN,EAAuBK,OAAvB,OAA8BkB,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMxB,QAAQQ,aAGxD,uBACA,qBAAKJ,UAAU,iBAAf,SACE,qBAAKK,IAAG,OAAEe,QAAF,IAAEA,OAAF,EAAEA,EAAMxB,QAAQU,MAAOC,IAAG,OAAEa,QAAF,IAAEA,OAAF,EAAEA,EAAMxB,QAAQK,SAEpD,2CACA,qBAAKD,UAAU,mBAAf,gBACGoB,QADH,IACGA,GADH,UACGA,EAAMxB,eADT,iBACG,EAAeoC,iBADlB,aACG,EAA0BrB,KAAI,SAACqB,EAAWC,GAAZ,OAC7B,iCAAmBD,EAAnB,MAAWC,QAGf,4CACA,qBAAKjC,UAAU,mBAAf,gBACGoB,QADH,IACGA,GADH,UACGA,EAAMxB,eADT,iBACG,EAAesC,kBADlB,aACG,EAA2BC,KAAK,QAEnC,yCACA,sBAAKnC,UAAU,mBAAf,UACE,mCAAIoB,QAAJ,IAAIA,GAAJ,UAAIA,EAAMxB,eAAV,iBAAI,EAAeY,eAAnB,aAAI,EAAwB4B,KAAKzB,KAAI,SAAC0B,GAAD,OAAOA,EAAEpC,QAAMkC,KAAK,QACzD,mCAAIf,QAAJ,IAAIA,GAAJ,UAAIA,EAAMxB,eAAV,iBAAI,EAAeY,eAAnB,aAAI,EAAwBC,QAAQE,KAAI,SAAC2B,GAAD,OAAOA,EAAErC,QAAMkC,KAAK,kB,MC1BvDI,MArBf,WACE,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,yCAGP,OACE,cAAC,iBAAD,CAAgBF,OAAQA,EAAxB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,eAAZ,SACE,cAAC,EAAD,cCRGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0160ba5d.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const GET_POKEMONS = gql`\n  query pokemons($first: Int!) {\n    pokemons(first: $first) {\n      id\n      name\n      image\n      maxHP\n      maxCP\n      attacks {\n        special {\n          name\n          damage\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_POKEMON_DETAILS = gql`\n  query pokemon($id: String!) {\n    pokemon(id: $id) {\n      id\n      number\n      name\n      weight {\n        minimum\n        maximum\n      }\n      height {\n        minimum\n        maximum\n      }\n      classification\n      types\n      resistant\n      attacks {\n        fast {\n          name\n          type\n          damage\n        }\n        special {\n          name\n          type\n          damage\n        }\n      }\n      weaknesses\n      fleeRate\n      maxCP\n      evolutions {\n        id\n      }\n      evolutionRequirements {\n        amount\n        name\n      }\n      maxHP\n      image\n    }\n  }\n`;\n","import React from 'react';\n\nexport const Pokemon = ({ pokemon }) => {\n  const britishNumberFormatter = new Intl.NumberFormat('en-GB');\n\n  return (\n    <div className=\"pokemon\">\n      <div className=\"pokemon__name\">\n        <p>{pokemon.name}</p>\n      </div>\n      <div className=\"pokemon__meta\">\n        <span>{britishNumberFormatter.format(pokemon.maxHP)}</span>\n        <span>{britishNumberFormatter.format(pokemon.maxCP)}</span>\n      </div>\n      <div className=\"pokemon__image\">\n        <img src={pokemon.image} alt={pokemon.name} />\n      </div>\n      <div className=\"pokemon__attacks\">\n        {pokemon?.attacks?.special.slice(0, 3).map((attack) => (\n          <span key={`${attack.name}-${attack.damage}`}>{attack.name}</span>\n        ))}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_POKEMONS } from '../graphql';\nimport { Pokemon } from './Pokemon';\nimport { Link } from 'react-router-dom';\n\nexport const PokemonWrapper = () => {\n  const { loading, error, data } = useQuery(GET_POKEMONS, {\n    variables: { first: 15 },\n  });\n\n  if (loading) return <p>Loading ...</p>;\n  if (error) return <pre>{error}</pre>;\n\n  return (\n    <div className=\"container pokemons\">\n      {data?.pokemons?.map((pokemon) => (\n        <Link key={pokemon.id} to={`/pokemon/${pokemon.id}`}>\n          <Pokemon pokemon={pokemon} />\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default PokemonWrapper;\n","import React from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_POKEMON_DETAILS } from '../graphql';\n\nexport const PokemonDetail = () => {\n  const britishNumberFormatter = new Intl.NumberFormat('en-GB');\n  const params = useParams();\n  const history = useHistory();\n\n  const { loading, error, data } = useQuery(GET_POKEMON_DETAILS, {\n    variables: { id: params.id },\n  });\n\n  const goBack = () => {\n    history.goBack();\n  };\n\n  if (loading) return <p>Loading ...</p>;\n  if (error) return <pre>{error}</pre>;\n\n  return (\n    <div className=\"pokemondetail\">\n      <button onClick={goBack}> Back</button>\n      <div className=\"pokemon\">\n        <div className=\"pokemon__name\">\n          <h1>{data?.pokemon.name}</h1>\n        </div>\n        <h4>Classification: {data?.pokemon.classification}</h4>\n        <div className=\"pokemon__meta\">\n          <span>\n            maxHP: {britishNumberFormatter.format(data?.pokemon.maxHP)} &nbsp;\n          </span>\n          <span>\n            maxCP: {britishNumberFormatter.format(data?.pokemon.maxCP)}\n          </span>\n        </div>\n        <br />\n        <div className=\"pokemon__image\">\n          <img src={data?.pokemon.image} alt={data?.pokemon.name} />\n        </div>\n        <h1>Resistant</h1>\n        <div className=\"pokemon__attacks\">\n          {data?.pokemon?.resistant?.map((resistant, index) => (\n            <span key={index}>{resistant} </span>\n          ))}\n        </div>\n        <h1>Weaknesses</h1>\n        <div className=\"pokemon__attacks\">\n          {data?.pokemon?.weaknesses?.join(', ')}\n        </div>\n        <h1>Attacks</h1>\n        <div className=\"pokemon__attacks\">\n          <p>{data?.pokemon?.attacks?.fast.map((f) => f.name).join(', ')}</p>\n          <p>{data?.pokemon?.attacks?.special.map((s) => s.name).join(', ')}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { PokemonWrapper } from './components/PokemonWrapper';\nimport { PokemonDetail } from './components/PokemonDetail';\nimport './App.css';\n\nfunction App() {\n  const client = new ApolloClient({\n    uri: 'https://graphql-pokemon2.vercel.app/',\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <PokemonWrapper />\n          </Route>\n          <Route path=\"/pokemon/:id\">\n            <PokemonDetail />\n          </Route>\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}