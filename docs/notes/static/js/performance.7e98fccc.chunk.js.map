{"version":3,"file":"static/js/performance.7e98fccc.chunk.js","mappings":"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","sources":["../node_modules/@firebase/performance/src/services/api_service.ts","../node_modules/@firebase/performance/src/constants.ts","../node_modules/@firebase/performance/src/utils/errors.ts","../node_modules/@firebase/performance/src/utils/console_logger.ts","../node_modules/@firebase/performance/src/services/settings_service.ts","../node_modules/@firebase/performance/src/utils/string_merger.ts","../node_modules/@firebase/performance/src/services/iid_service.ts","../node_modules/@firebase/performance/src/utils/attributes_utils.ts","../node_modules/@firebase/performance/src/services/remote_config_service.ts","../node_modules/@firebase/performance/src/services/initialization_service.ts","../node_modules/@firebase/performance/src/services/transport_service.ts","../node_modules/@firebase/performance/src/services/perf_logger.ts","../node_modules/@firebase/performance/src/utils/metric_utils.ts","../node_modules/@firebase/performance/src/resources/trace.ts","../node_modules/@firebase/performance/src/resources/network_request.ts","../node_modules/@firebase/performance/src/services/oob_resources_service.ts","../node_modules/@firebase/performance/src/controllers/perf.ts","../node_modules/@firebase/performance/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  readonly onFirstInputDelay?: Function;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (\n      !fetch ||\n      !Promise ||\n      !this.navigator ||\n      !this.navigator.cookieEnabled\n    ) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  installationsService!: FirebaseInstallations;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { setupTransportService } from '../services/transport_service';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise().then(\n              setupOobResources,\n              setupOobResources\n            );\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { PerformanceController } from './src/controllers/perf';\nimport { setupApi } from './src/services/api_service';\nimport { SettingsService } from './src/services/settings_service';\nimport { ERROR_FACTORY, ErrorCode } from './src/utils/errors';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { name, version } from './package.json';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport function registerPerformance(instance: FirebaseNamespace): void {\n  const factoryMethod = (\n    app: FirebaseApp,\n    installations: FirebaseInstallations\n  ): PerformanceController => {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n    }\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  };\n\n  // Register performance with firebase-app.\n  (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'performance',\n      container => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        // The following call will always succeed because perf has `import '@firebase/installations'`\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factoryMethod(app, installations);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterPerformance(firebase);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    performance?: {\n      (app?: FirebaseApp): FirebasePerformance;\n    };\n  }\n  interface FirebaseApp {\n    performance?(): FirebasePerformance;\n  }\n}\n"],"names":["apiInstance","windowInstance","SDK_VERSION","version","TRACE_MEASURE_PREFIX","OOB_TRACE_PAGE_LOAD_PREFIX","FIRST_CONTENTFUL_PAINT_COUNTER_NAME","FIRST_INPUT_DELAY_COUNTER_NAME","CONFIG_LOCAL_STORAGE_KEY","CONFIG_EXPIRY_LOCAL_STORAGE_KEY","SERVICE_NAME","ERROR_DESCRIPTION_MAP","_a","ERROR_FACTORY","ErrorFactory","consoleLogger","Logger","logLevel","LogLevel","settingsServiceInstance","window","create","this","performance","PerformanceObserver","windowLocation","location","navigator","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","Api","href","split","name","mark","measureName","mark1","mark2","measure","type","getEntriesByType","getEntriesByName","timeOrigin","timing","navigationStart","fetch","Promise","isIndexedDBAvailable","info","entryType","callback","observer","list","getEntries","_i","entry","observe","entryTypes","undefined","mergeStrings","part1","part2","sizeDiff","length","resultArray","i","push","charAt","join","iid","VisibilityState","instrumentationEnabled","dataCollectionEnabled","loggingEnabled","tracesSamplingRate","networkRequestsSamplingRate","logEndPointUrl","flTransportEndpointUrl","transportKey","logSource","logTraceAfterSampling","logNetworkAfterSampling","configTimeToLive","SettingsService","appId","firebaseAppInstance","options","projectId","apiKey","concat","getIid","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","RegExp","getServiceWorkerStatus","getInstance","serviceWorker","controller","getVisibilityState","visibilityState","VISIBLE","HIDDEN","UNKNOWN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","REMOTE_CONFIG_SDK_VERSION","DEFAULT_CONFIGS","FIS_AUTH_PREFIX","getConfig","config","expiryString","getItem","expiry","Number","Date","now","configStringified","JSON","parse","getStoredConfig","processConfig","resolve","authTokenPromise","installationsService","getToken","then","authTokenVal","getAuthTokenPromise","authToken","configEndPoint","getProjectId","getApiKey","request","Request","method","headers","Authorization","body","stringify","app_instance_id","app_instance_id_token","app_id","getAppId","app_version","sdk_version","response","ok","json","catch","COULD_NOT_GET_CONFIG_MSG","getRemoteConfig","setItem","String","storeConfig","entries","fpr_enabled","fpr_log_source","fpr_log_endpoint_url","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","fpr_vc_trace_sampling_rate","shouldLogAfterSampling","samplingRate","Math","random","initializationPromise","initializationStatus","getInitializationPromise","readyState","handler_1","removeEventListener","addEventListener","getDocumentReadyComplete","iidPromise","getId","iidVal","getIidPromise","changeInitializationStatus","logger","DEFAULT_SEND_INTERVAL_MS","remainingTries","queue","isTransportSetup","processQueue","timeOffset","setTimeout","staged","splice","log_event","map","evt","source_extension_json_proto3","message","event_time_ms","eventTime","data","flTransportFullUrl","getFlTransportFullUrl","postToFlEndpoint","res","transportWait","nextRequestWaitMillis","requestOffset","isNaN","max","logResponseDetails","Array","isArray","responseAction","sendEventsToFl","request_time_ms","client_info","client_type","js_client_info","log_source","dispatchQueueEvents","addToQueue","sendLog","resource","resourceType","serializer","args","transportHandler","logTrace","trace","settingsService","isAuto","requiredApisAvailable","sendTraceLog","networkRequest","networkRequestMetric","url","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","serializeNetworkRequest","traceMetric","is_auto","duration_us","durationUs","Object","keys","counters","customAttributes","getAttributes","custom_attributes","trace_metric","serializeTrace","google_app_id","web_app_info","page_url","getUrl","service_worker_status","visibility_state","effective_connection_type","application_process_state","oobMetrics","traceMeasureName","state","api","randomId","floor","traceStartMark","TRACE_START_MARK_PREFIX","traceStopMark","TRACE_STOP_MARK_PREFIX","traceMeasure","calculateTraceMetrics","Trace","traceName","startTime","duration","attributes","__assign","metrics","metric","counter","numAsInteger","putMetric","startsWith","indexOf","customMetricName","providedValue","valueAsInteger","convertMetricValueToInteger","attr","value","isValidName","some","prefix","match","isValidValue","isValidCustomAttributeValue","attributeName","attributeValue","perfMeasureEntries","perfMeasureEntry","getTimeOrigin","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","setStartTime","setDuration","domInteractive","domContentLoadedEventEnd","loadEventEnd","firstPaint","find","paintObject","firstContentfulPaint","createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","networkRequestUrl","logEndpointUrl","flEndpointUrl","logNetworkRequest","transferSize","setupOobResources","timeoutId_1","createOobTrace","fid","clearTimeout","setupOobTraces","resources","setupObserver","setupNetworkRequests","measures","createUserTimingTrace","setupUserTimingTraces","substring","app","validateIndexedDBOpenable","isAvailable","error","PerformanceController","val","instance","factoryMethod","installations","setupApi","INTERNAL","registerComponent","Component","container","getProvider","getImmediate","registerVersion","registerPerformance","firebase"],"sourceRoot":""}