{"version":3,"file":"static/js/analytics.106fcdb9.chunk.js","mappings":"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","sources":["../node_modules/@firebase/analytics/src/constants.ts","../node_modules/@firebase/analytics/src/logger.ts","../node_modules/@firebase/analytics/src/helpers.ts","../node_modules/@firebase/analytics/src/errors.ts","../node_modules/@firebase/analytics/src/get-config.ts","../node_modules/@firebase/analytics/src/initialize-ids.ts","../node_modules/@firebase/analytics/src/factory.ts","../node_modules/@firebase/analytics/src/functions.ts","../node_modules/@firebase/analytics/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/**\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n *\n * @public\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /**\n   * @deprecated\n   * This event name is deprecated and is unsupported in updated\n   * Enhanced Ecommerce reports.\n   */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DynamicConfig,\n  ThrottleMetadata,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.customData.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  Gtag,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations FirebaseInstallations instance.\n *\n * @returns Measurement ID.\n */\nexport async function initializeIds(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: FirebaseInstallations,\n  gtagCore: Gtag,\n  dataLayerName: string\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  const configProperties: { [key: string]: string | boolean } = {\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  };\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions,\n  DynamicConfig,\n  MinimalDynamicConfig,\n  AnalyticsCallOptions,\n  CustomParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { initializeIds } from './initialize-ids';\nimport { logger } from './logger';\nimport { FirebaseService } from '@firebase/app-types/private';\n\ninterface FirebaseAnalyticsInternal\n  extends FirebaseAnalytics,\n    FirebaseService {}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName\n  );\n\n  const analyticsInstance: FirebaseAnalyticsInternal = {\n    app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: (\n      eventName: string,\n      eventParams?: EventParams | CustomParams,\n      options?: AnalyticsCallOptions\n    ) => {\n      logEvent(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        eventName,\n        eventParams,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setCurrentScreen: (screenName, options) => {\n      setCurrentScreen(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        screenName,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserId: (id, options) => {\n      setUserId(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        id,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserProperties: (properties, options) => {\n      setUserProperties(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        properties,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setAnalyticsCollectionEnabled: enabled => {\n      setAnalyticsCollectionEnabled(\n        initializationPromisesMap[appId],\n        enabled\n      ).catch(e => logger.error(e));\n    },\n    INTERNAL: {\n      delete: (): Promise<void> => {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  factory,\n  settings,\n  resetGlobalVars,\n  getGlobalVars\n} from './src/factory';\nimport { EventName } from './src/constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './src/errors';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension\n} from '@firebase/util';\nimport { name, version } from './package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\n\nexport function registerAnalytics(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factory(app, installations);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      settings,\n      EventName,\n      isSupported\n    })\n  );\n\n  instance.INTERNAL.registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  instance.registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nexport { factory, settings, resetGlobalVars, getGlobalVars };\n\nregisterAnalytics(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n\n/**\n * this is a public static method provided to users that wraps four different checks:\n *\n * 1. check if it's not a browser extension environment.\n * 1. check if cookie is enabled in current browser.\n * 3. check if IndexedDB is supported by the browser environment.\n * 4. check if the current browser context is valid for using IndexedDB.\n *\n */\nasync function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n"],"names":["GtagCommand","EventName","GTAG_URL","logger","Logger","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","measurementId","gtagParams","correspondingAppId","_a","Promise","all","dynamicConfigResults","foundConfig","find","config","appId","error","e_1","CONFIG","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","Array","isArray","sendToId","initializationPromise","push","gaSendToList_1","_i","length","Object","values","EVENT","e_2","wrapOrCreateGtag","dataLayerName","gtagFunctionName","_args","window","arguments","command","idOrNameOrParams","SET","e_3","wrapGtag","wrappedGtag","ERRORS","ERROR_FACTORY","ErrorFactory","defaultRetryData","throttleMetadata","intervalMillis","RetryData","this","metadata","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","appFields","request","method","headers","appUrl","replace","fetch","response","_b","status","errorMessage","json","jsonResponse","message","create","httpStatus","responseMessage","attemptFetchDynamicConfigWithRetry","signal","retryData","throttleEndTimeMillis","backoffCount","setAbortableTimeout","warn","deleteThrottleMetadata","e","FirebaseError","customData","Number","isRetriableError","backoffMillis","calculateBackoffMillis","Date","now","setThrottleMetadata","debug","resolve","reject","Math","max","timeout","setTimeout","addEventListener","clearTimeout","listeners","AnalyticsAbortSignal","listener","forEach","initializeIds","app","installations","dynamicConfigPromise","timeoutMillis","options","getThrottleMetadata","abort","undefined","fetchDynamicConfigWithRetry","then","catch","fidPromise","isIndexedDBAvailable","errorInfo","validateIndexedDBOpenable","validateIndexedDB","envIsValid","getId","_c","dynamicConfig","fid","scriptTags","document","getElementsByTagName","tag","src","includes","findGtagScriptOnPage","script","createElement","async","head","appendChild","insertScriptTag","configProperties","gtagCoreFunction","wrappedGtagFunction","gtagName","globalInitDone","settings","factory","mismatchedEnvMessages","isBrowserExtension","areCookiesEnabled","details","map","index","join","err","warnOnBrowserContextMismatch","id","dataLayer","getOrCreateDataLayer","analyticsInstance","logEvent","eventName","eventParams","gtagFunction","global","params","setCurrentScreen","screenName","update","setUserId","setUserProperties","properties","flatProperties","keys","key","setAnalyticsCollectionEnabled","enabled","INTERNAL","delete","instance","ANALYTICS_TYPE","isSupported","firebase","registerComponent","Component","container","getProvider","getImmediate","setServiceProps","reason","registerVersion"],"sourceRoot":""}