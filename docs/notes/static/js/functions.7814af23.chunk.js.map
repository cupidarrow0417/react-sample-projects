{"version":3,"file":"static/js/functions.7814af23.chunk.js","mappings":"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","sources":["../node_modules/@firebase/functions/src/api/error.ts","../node_modules/@firebase/functions/src/context.ts","../node_modules/@firebase/functions/src/serializer.ts","../node_modules/@firebase/functions/src/api/service.ts","../node_modules/@firebase/functions/src/config.ts","../node_modules/@firebase/functions/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n","import {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\n\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (data instanceof Date) {\n      return data.toISOString();\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data!, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json!, x => this.decode(x));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: () => void;\n  private region: string;\n  private customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\n   * @param app_ The FirebaseApp to use.\n   * @param regionOrCustomDomain_ one of:\n   *   a) A region to call functions from, such as us-central1\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    private appCheckProvider: Provider<AppCheckInternalComponentName>,\n    regionOrCustomDomain_: string = 'us-central1',\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return Promise.resolve(this.deleteService());\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Modify this instance to communicate with the Cloud Functions emulator.\n   *\n   * Note: this must be called before this instance has been used to do any operations.\n   *\n   * @param host The emulator host (ex: localhost)\n   * @param port The emulator port (ex: 5001)\n   */\n  useEmulator(host: string, port: number): void {\n    this.emulatorOrigin = `http://${host}:${port}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @deprecated Prefer the useEmulator(host, port) method.\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: { [key: string]: string }\n  ): Promise<HttpResponse> {\n    headers['Content-Type'] = 'application/json';\n\n    const appCheckToken = await this.getAppCheckToken();\n    if (appCheckToken !== null) {\n      headers['X-Firebase-AppCheck'] = appCheckToken;\n    }\n\n    let response: Response;\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: HttpResponseBody | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  private async getAppCheckToken(): Promise<string | null> {\n    const appCheck = this.appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // If getToken() fails, it will still return a dummy token that also has\n      // an error field containing the error message. We will send any token\n      // provided here and show an error if/when it is rejected by the functions\n      // endpoint.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers: { [key: string]: string } = {};\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.instanceIdToken) {\n      headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nexport function registerFunctions(\n  instance: _FirebaseNamespace,\n  fetchImpl: typeof fetch\n): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n\n  function factory(\n    container: ComponentContainer,\n    { instanceIdentifier: regionOrCustomDomain }: InstanceFactoryOptions\n  ): Service {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    const messagingProvider = container.getProvider('messaging');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(\n      app,\n      authProvider,\n      messagingProvider,\n      appCheckProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  }\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport * as types from '@firebase/functions-types';\nimport { registerFunctions } from './src/config';\n\nimport { name, version } from './package.json';\n\nregisterFunctions(firebase as _FirebaseNamespace, fetch.bind(self));\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    functions?: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions?(regionOrCustomDomain?: string): types.FirebaseFunctions;\n  }\n}\n"],"names":["errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","code","message","details","_super","Object","setPrototypeOf","_this","HttpsErrorImpl","prototype","__extends","Error","authProvider","messagingProvider","auth","messaging","this","getImmediate","optional","get","then","ContextProvider","undefined","getToken","token","_a","accessToken","self","Notification","permission","getAuthToken","authToken","getInstanceIdToken","instanceIdToken","mapValues","o","f","result","key","hasOwnProperty","Serializer","data","Number","valueOf","isFinite","toString","call","Date","toISOString","Array","isArray","map","x","encode","json","value","isNaN","decode","app_","appCheckProvider","regionOrCustomDomain_","fetchImpl","serializer","emulatorOrigin","delete","Promise","resolve","deleteService","contextProvider","cancelAllRequests","url","URL","customDomain","origin","region","e","Service","name","projectId","options","host","port","body","headers","getAppCheckToken","appCheckToken","method","JSON","stringify","response","status","appCheck","_url","getContext","context","_b","timeout","millis","timer","promise","_","reject","setTimeout","failAfter","failAfterPromise","race","clearTimeoutWrapper","postJSON","error","bodyJSON","codeForHTTPStatus","description","errorJSON","status_1","_errorForResponse","responseData","clearTimeout","instance","namespaceExports","Functions","registerComponent","Component","container","regionOrCustomDomain","app","getProvider","setServiceProps","setMultipleInstances","registerFunctions","firebase","fetch","bind"],"sourceRoot":""}