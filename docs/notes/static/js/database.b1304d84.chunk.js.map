{"version":3,"file":"static/js/database.b1304d84.chunk.js","mappings":"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","sources":["../node_modules/@firebase/database/src/core/version.ts","../node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","../node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","../node_modules/@firebase/database/src/core/storage/storage.ts","../node_modules/@firebase/database/src/core/util/util.ts","../node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","../node_modules/@firebase/database/src/core/AuthTokenProvider.ts","../node_modules/@firebase/database/src/realtime/Constants.ts","../node_modules/@firebase/database/src/core/RepoInfo.ts","../node_modules/@firebase/database/src/core/stats/StatsCollection.ts","../node_modules/@firebase/database/src/core/stats/StatsManager.ts","../node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","../node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","../node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","../node_modules/@firebase/database/src/realtime/TransportManager.ts","../node_modules/@firebase/database/src/realtime/Connection.ts","../node_modules/@firebase/database/src/core/ServerActions.ts","../node_modules/@firebase/database/src/core/util/EventEmitter.ts","../node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","../node_modules/@firebase/database/src/core/util/Path.ts","../node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","../node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","../node_modules/@firebase/database/src/core/snap/snap.ts","../node_modules/@firebase/database/src/core/PersistentConnection.ts","../node_modules/@firebase/database/src/core/snap/Node.ts","../node_modules/@firebase/database/src/core/snap/indexes/Index.ts","../node_modules/@firebase/database/src/core/util/SortedMap.ts","../node_modules/@firebase/database/src/core/snap/comparators.ts","../node_modules/@firebase/database/src/core/snap/LeafNode.ts","../node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","../node_modules/@firebase/database/src/core/snap/IndexMap.ts","../node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","../node_modules/@firebase/database/src/core/snap/childSet.ts","../node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","../node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","../node_modules/@firebase/database/src/core/util/NextPushId.ts","../node_modules/@firebase/database/src/core/view/Change.ts","../node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","../node_modules/@firebase/database/src/core/view/QueryParams.ts","../node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","../node_modules/@firebase/database/src/core/SnapshotHolder.ts","../node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","../node_modules/@firebase/database/src/core/stats/StatsListener.ts","../node_modules/@firebase/database/src/core/operation/Operation.ts","../node_modules/@firebase/database/src/core/stats/StatsReporter.ts","../node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","../node_modules/@firebase/database/src/core/util/ImmutableTree.ts","../node_modules/@firebase/database/src/core/operation/ListenComplete.ts","../node_modules/@firebase/database/src/core/operation/Overwrite.ts","../node_modules/@firebase/database/src/core/operation/Merge.ts","../node_modules/@firebase/database/src/core/view/CacheNode.ts","../node_modules/@firebase/database/src/core/view/EventGenerator.ts","../node_modules/@firebase/database/src/core/view/ViewCache.ts","../node_modules/@firebase/database/src/core/CompoundWrite.ts","../node_modules/@firebase/database/src/core/WriteTree.ts","../node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","../node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","../node_modules/@firebase/database/src/core/view/ViewProcessor.ts","../node_modules/@firebase/database/src/core/view/View.ts","../node_modules/@firebase/database/src/core/SyncPoint.ts","../node_modules/@firebase/database/src/core/SyncTree.ts","../node_modules/@firebase/database/src/core/util/ServerValues.ts","../node_modules/@firebase/database/src/core/util/Tree.ts","../node_modules/@firebase/database/src/core/util/validation.ts","../node_modules/@firebase/database/src/core/view/EventQueue.ts","../node_modules/@firebase/database/src/core/Repo.ts","../node_modules/@firebase/database/src/core/util/libs/parser.ts","../node_modules/@firebase/database/src/core/view/Event.ts","../node_modules/@firebase/database/src/core/view/EventRegistration.ts","../node_modules/@firebase/database/src/exp/OnDisconnect.ts","../node_modules/@firebase/database/src/exp/Reference_impl.ts","../node_modules/@firebase/database/src/exp/Database.ts","../node_modules/@firebase/database/src/exp/ServerValue.ts","../node_modules/@firebase/database/src/exp/Transaction.ts","../node_modules/@firebase/database/src/api/onDisconnect.ts","../node_modules/@firebase/database/src/api/TransactionResult.ts","../node_modules/@firebase/database/src/api/Reference.ts","../node_modules/@firebase/database/src/api/Database.ts","../node_modules/@firebase/database/src/api/internal.ts","../node_modules/@firebase/database/src/api/test_access.ts","../node_modules/@firebase/database/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\n\n// TODO: revert to import { QueryContext } from '../view/EventRegistration'; once the modular SDK goes GA\n/**\n * This is part of a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype QueryContext = any;\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            pathPopFront(relativePath),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(\n            writesCache,\n            changePath,\n            oldEventSnap.getNode(),\n            serverNode\n          );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../exp/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../exp/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(\n  queryKey: string\n): { queryId: string; path: Path } {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, 'eventType') +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentName: string,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../exp/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../exp/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n *  to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A promise which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app-exp';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\n\nimport { ReferenceImpl } from './Reference_impl';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches Repo instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing repo in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a database instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The FirebaseApp associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `FirebaseDatabase` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database-exp').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of Firebase.transaction.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `transaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A Promise that can optionally be used instead of the onComplete\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Compat } from '@firebase/util';\n\nimport { Indexable } from '../core/util/misc';\nimport { warn } from '../core/util/util';\n\n// TODO: revert to import { OnDisconnect as ExpOnDisconnect } from '../../exp/index'; once the modular SDK goes GA\n/**\n * This is a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ExpOnDisconnect = any;\n\nexport class OnDisconnect implements Compat<ExpOnDisconnect> {\n  constructor(readonly _delegate: ExpOnDisconnect) {}\n\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n    const result = this._delegate.cancel();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n    const result = this._delegate.remove();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n    const result = this._delegate.set(value);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'OnDisconnect.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n    const result = this._delegate.setWithPriority(value, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n    const result = this._delegate.update(objectToMerge);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount } from '@firebase/util';\n\nimport { DataSnapshot } from './Reference';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Compat,\n  Deferred,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\n\nimport {\n  OnDisconnect as ExpOnDisconnect,\n  off,\n  onChildAdded,\n  onChildChanged,\n  onChildMoved,\n  onChildRemoved,\n  onValue,\n  EventType,\n  limitToFirst,\n  query,\n  limitToLast,\n  orderByChild,\n  orderByKey,\n  orderByValue,\n  orderByPriority,\n  startAt,\n  startAfter,\n  endAt,\n  endBefore,\n  equalTo,\n  get,\n  set,\n  update,\n  setWithPriority,\n  remove,\n  setPriority,\n  push,\n  runTransaction,\n  _QueryImpl,\n  _ReferenceImpl,\n  child\n} from '../../exp/index'; // import from the exp public API\nimport { warn } from '../core/util/util';\nimport {\n  validateBoolean,\n  validateEventType,\n  validatePathString,\n  validateWritablePath\n} from '../core/util/validation';\nimport { UserCallback } from '../core/view/EventRegistration';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { ThenableReferenceImpl } from '../exp/Reference_impl';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\n\n// TODO: revert to import {  DataSnapshot as ExpDataSnapshot, Query as ExpQuery,\n// Reference as ExpReference,} from '../../exp/index'; once the modular SDK goes GA\n/**\n * This is part of a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype ExpDataSnapshot = any;\ntype ExpQuery = any;\ntype ExpReference = any;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot implements Compat<ExpDataSnapshot> {\n  constructor(\n    readonly _database: Database,\n    readonly _delegate: ExpDataSnapshot\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @returns Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param path - Path to a child.\n   * @returns DataSnapshot for child node.\n   */\n  child(path: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    path = String(path);\n    validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param path - Path to a child.\n   * @returns Whether the child exists.\n   */\n  hasChild(path: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @returns The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param action - Callback function to be called\n   * for each child.\n   * @returns True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (snapshot: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(expDataSnapshot =>\n      action(new DataSnapshot(this._database, expDataSnapshot))\n    );\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  }\n\n  get key() {\n    return this._delegate.key;\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @returns The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  }\n\n  /**\n   * @returns The Firebase reference for the location this snapshot's data came\n   * from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n\nexport interface SnapshotCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query implements Compat<ExpQuery> {\n  constructor(readonly database: Database, readonly _delegate: ExpQuery) {}\n\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n    const valueCallback: UserCallback = (expSnapshot, previousChildName?) => {\n      callback.call(\n        ret.context,\n        new DataSnapshot(this.database, expSnapshot),\n        previousChildName\n      );\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = ret.cancel?.bind(ret.context);\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      default:\n        throw new Error(\n          errorPrefix('Query.on', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n  }\n\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n    if (callback) {\n      const valueCallback: UserCallback = () => {};\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType as EventType, valueCallback);\n    } else {\n      off(this._delegate, eventType as EventType | undefined);\n    }\n  }\n\n  /**\n   * Get the server-value for this query, or return a cached value if not connected.\n   */\n  get(): Promise<DataSnapshot> {\n    return get(this._delegate).then(expSnapshot => {\n      return new DataSnapshot(this.database, expSnapshot);\n    });\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   */\n  once(\n    eventType: string,\n    callback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n    const deferred = new Deferred<DataSnapshot>();\n    const valueCallback: UserCallback = (expSnapshot, previousChildName?) => {\n      const result = new DataSnapshot(this.database, expSnapshot);\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n      deferred.resolve(result);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = (error: Error) => {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n      deferred.reject(error);\n    };\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      default:\n        throw new Error(\n          errorPrefix('Query.once', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  }\n\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAt(value, name))\n    );\n  }\n\n  startAfter(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAfter(value, name))\n    );\n  }\n\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  }\n\n  endBefore(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, endBefore(value, name))\n    );\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, equalTo(value, name))\n    );\n  }\n\n  /**\n   * @returns URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param fnName - The function name (on or once)\n   *\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | undefined; context: object | undefined } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: undefined, context: undefined };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 'cancelOrContext') +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return new Reference(\n      this.database,\n      new _ReferenceImpl(this._delegate._repo, this._delegate._path)\n    );\n  }\n}\n\nexport class Reference extends Query implements Compat<ExpReference> {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   */\n  constructor(readonly database: Database, readonly _delegate: ExpReference) {\n    super(\n      database,\n      new _QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)\n    );\n  }\n\n  /** @returns {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  }\n\n  child(pathString: string): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n    return new Reference(this.database, child(this._delegate, pathString));\n  }\n\n  /** @returns {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    const parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  }\n\n  /** @returns {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  }\n\n  set(\n    newVal: unknown,\n    onComplete?: (error: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    const result = set(this._delegate, newVal);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    values: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n\n    if (Array.isArray(values)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n      values = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n\n    const result = update(this._delegate, values);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'Reference.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n\n    const result = setWithPriority(this._delegate, newVal, newPriority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n\n    const result = remove(this._delegate);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  transaction(\n    transactionUpdate: (currentData: unknown) => unknown,\n    onComplete?: (\n      error: Error | null,\n      committed: boolean,\n      dataSnapshot: DataSnapshot | null\n    ) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback(\n      'Reference.transaction',\n      'transactionUpdate',\n      transactionUpdate,\n      false\n    );\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean(\n      'Reference.transaction',\n      'applyLocally',\n      applyLocally,\n      true\n    );\n\n    const result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally\n    }).then(\n      transactionResult =>\n        new TransactionResult(\n          transactionResult.committed,\n          new DataSnapshot(this.database, transactionResult.snapshot)\n        )\n    );\n    if (onComplete) {\n      result.then(\n        transactionResult =>\n          onComplete(\n            null,\n            transactionResult.committed,\n            transactionResult.snapshot\n          ),\n        error => onComplete(error, false, null)\n      );\n    }\n    return result;\n  }\n\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n\n    const result = setPriority(this._delegate, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n\n    const expPromise = push(this._delegate, value) as ThenableReferenceImpl;\n    const promise = expPromise.then(\n      expRef => new Reference(this.database, expRef)\n    );\n\n    if (onComplete) {\n      promise.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n\n    const result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  }\n\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(\n      new ExpOnDisconnect(this._delegate._repo, this._delegate._path)\n    );\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  validateArgCount,\n  Compat,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport {\n  goOnline,\n  connectDatabaseEmulator,\n  goOffline,\n  ref,\n  refFromURL,\n  increment,\n  serverTimestamp\n} from '../../exp/index'; // import from the exp public API\n\nimport { Reference } from './Reference';\n\n// TODO: revert to import {FirebaseDatabase as ExpDatabase} from '@firebase/database' once modular SDK goes GA\n/**\n * This is a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ExpDatabase = any;\n\n/**\n * Class representing a firebase database.\n */\nexport class Database implements FirebaseService, Compat<ExpDatabase> {\n  static readonly ServerValue = {\n    TIMESTAMP: serverTimestamp(),\n    increment: (delta: number) => increment(delta)\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   */\n  constructor(readonly _delegate: ExpDatabase, readonly app: FirebaseApp) {}\n\n  INTERNAL = {\n    delete: () => this._delegate._delete()\n  };\n\n  /**\n   * Modify this instance to communicate with the Realtime Database emulator.\n   *\n   * <p>Note: This method must be called before performing any other operation.\n   *\n   * @param host - the emulator host (ex: localhost)\n   * @param port - the emulator port (ex: 8080)\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n   */\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions;\n    } = {}\n  ): void {\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param path - The relative string path or an existing Reference to a database\n   * location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @returns Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      const childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      const childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @returns Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    const apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  }\n\n  // Make individual repo go offline.\n  goOffline(): void {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  }\n\n  goOnline(): void {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  Provider\n} from '@firebase/component';\nimport * as types from '@firebase/database-types';\n\nimport { _repoManagerDatabaseFromApp } from '../../exp/index';\nimport {\n  repoInterceptServerData,\n  repoStats,\n  repoStatsIncrementCounter\n} from '../core/Repo';\nimport { setSDKVersion } from '../core/version';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { Database } from './Database';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  const connection = ref._delegate._repo.persistentConnection_;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (connection as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  repoStats(ref._delegate._repo, showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  repoStatsIncrementCounter(ref._delegate._repo, metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref._delegate._repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return repoInterceptServerData(ref._delegate._repo, callback);\n};\n\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n *\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAuthImpl - custom auth implementation\n */\nexport function initStandalone<T>({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  namespace,\n  nodeAdmin = false\n}: {\n  app: FirebaseApp;\n  url: string;\n  version: string;\n  customAuthImpl: FirebaseAuthInternal;\n  namespace: T;\n  nodeAdmin?: boolean;\n}): {\n  instance: types.Database;\n  namespace: T;\n} {\n  setSDKVersion(version);\n\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const authProvider = new Provider<FirebaseAuthInternalName>(\n    'auth-internal',\n    new ComponentContainer('database-standalone')\n  );\n  authProvider.setComponent(\n    new Component('auth-internal', () => customAuthImpl, ComponentType.PRIVATE)\n  );\n\n  return {\n    instance: new Database(\n      _repoManagerDatabaseFromApp(\n        app,\n        authProvider,\n        /* appCheckProvider= */ undefined,\n        url,\n        nodeAdmin\n      ),\n      app\n    ) as types.Database,\n    namespace\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { repoManagerForceRestClient } from '../exp/Database';\nimport { Connection } from '../realtime/Connection';\n\nimport { Query } from './Reference';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\nexport const queryIdentifier = function (query: Query) {\n  return query._delegate._queryIdentifier;\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport * as types from '@firebase/database-types';\nimport { isNodeSdk } from '@firebase/util';\n\nimport { name, version } from './package.json';\nimport { Database } from './src/api/Database';\nimport * as INTERNAL from './src/api/internal';\nimport { DataSnapshot, Query, Reference } from './src/api/Reference';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { enableLogging } from './src/core/util/util';\nimport { setSDKVersion } from './src/core/version';\nimport { repoManagerDatabaseFromApp } from './src/exp/Database';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n\n        return new Database(\n          repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url),\n          app\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/Reference';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"],"names":["SDK_VERSION","setSDKVersion","version","domStorage_","prefix_","DOMStorageWrapper","key","value","this","removeItem","prefixedName_","setItem","stringify","storedVal","getItem","jsonEval","name","toString","cache_","isInMemoryStorage","MemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","log","bind","set","remove","get","logWrapper","prefix","__spreadArray","__read","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","bias","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","appName_","appCheckProvider","appCheck","getImmediate","optional","then","_this","AppCheckTokenProvider","forceRefresh","getToken","Promise","resolve","reject","listener","_a","addTokenListener","firebaseOptions_","authProvider_","auth_","onInit","auth","FirebaseAuthTokenProvider","catch","code","addAuthTokenListener","removeAuthTokenListener","errorMessage","accessToken","EmulatorTokenProvider","PROTOCOL_VERSION","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","RepoInfo","Object","newHost","isCacheableHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","type","params","connURL","isCustomHost","repoInfoNeedsQueryParam","pairs","counters_","StatsCollection","amount","deepCopy","collections","reporters","statsManagerGetCollection","hashString","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","PacketReceiver","responseNum","callback","requestNum","toProcess","this_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","BrowserPollConnection","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","document","readyState","called_1","wrappedFn_1","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","href","Windows","UI","close","myDisconnFrame","removeChild","shutdown_","dataStr","incrementCounter","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","open","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","keepaliveTimer","frames","totalFrames","WebSocketConnection","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","String","clearInterval","setInterval","send","initTransports_","TransportManager","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","_c","transport","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","Connection","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","token","stats","allowedEvents_","listeners_","EventEmitter","eventType","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","_super","isMobileCordova","online_","trigger","__extends","OnlineMonitor","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","Path","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPath","validationPathToErrorString","__EMPTY_NODE","MAX_NODE","hidden","visibilityChange","visible_","visible","VisibilityMonitor","RECONNECT_MIN_DELAY","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","Map","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","requestNumber_","r","connected_","realtime_","sendRequest","requestCBHash_","initConnection_","deferred","Deferred","request","p","_path","q","_queryObject","outstandingGet","outstandingGets_","outstandingGetCount_","index","undefined","sendGet_","promise","currentHashFn","tag","queryId","_queryIdentifier","listens","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","maxReconnectDelay_","tryAppCheck","token_1","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","Date","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","scheduleConnect_","reconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onDisconnect_1","onRealtimeDisconnect_","nextConnectionId_","canceled_1","connection_1","closeFn","sendRequestFn","forceTokenRefresh_","all","_b","interrupt","error_1","interruptReasons_","isEmpty","delta","serverTimeOffset","put","map","listen","normalizedPathString","statusCode","explanation","notifyForInvalidToken","securityDebugCallback_","console","replace","values","_d","queries","_f","clientName","isReactNative","reportStats","currentlyOnline","node","NamedNode","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","KeyIndex","val","assertionError","indexValue","KEY_INDEX","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","SortedMapIterator","pop","color","LLRBNode","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","__childrenNodeConstructor","nodeFromJSON","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","value_","priorityNode_","LeafNode","lazyHash_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","_defaultIndexMap","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","num","current_","mask","bits_","Base12Num","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","indexDefinition","existingChildren","newIndex","sawIndexedValue","iter","getIterator","Wrap","next","getNext","isDefinedOn","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","children_","indexMap_","ChildrenNode","Default","child","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","setPriorityMaxNode","json","node_1","childData","children_1","childrenHavePriority_1","childSet","sortedChildSet","setNodeFromJSON","indexPath_","PathIndex","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","i_1","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","index_","IndexedFilter","newChild","affectedPath","optChangeAccumulator","isIndexed","oldChild","hasChild","trackChildChange","withIndex","newSnap","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","LimitedFilter","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","getReverseIterator","indexCompare_1","foundStartPost","childKey","childSnap","changeAccumulator","indexCmp_1","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","QueryParams","queryParamsStartAt","queryParams","newParams","queryParamsEndAt","queryParamsOrderBy","queryParamsToRestQueryStringParameters","orderBy","qs","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","restRequest_","querystring","xhr","XMLHttpRequest","responseText","rootNode_","SnapshotHolder","newSnapshotNode","newSparseSnapshotTree","children","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","sparseSnapshotTreeForEachTree","prefixPath","func","forEach","sparseSnapshotTreeForEachChild","OperationType","collection_","last_","StatsListener","newStats","stat","collection","server_","statsToReport_","statsListener_","reportStats_","StatsReporter","reportedStats","haveStatsToReport","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","emptyChildrenSingleton","affectedTree","revert","ACK_USER_WRITE","AckUserWrite","subtree","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","node_","fullyInitialized_","filtered_","CacheNode","isFullyInitialized","isCompleteForChild","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","getPredecessorChildName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","ImmutableTree","childPath","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","writeTree_","CompoundWrite","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite_1","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","merge_1","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","changeMap","ChildChangeAccumulator","oldChange","oldType","from","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","writes_","viewCache_","optCompleteServerCache_","WriteTreeCompleteChildSource","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","filterServerNode","accumulator","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","foreach","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","filtersNodes","viewProcessorRevertUserWrite","ackPath","isCompleteForPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","getChanges","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","getCompleteChild","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","referenceConstructor","initialViewCache","eventRegistrations_","indexFilter","hasLimit","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","View","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","path_1","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","indexedValueChanged","eventGeneratorGenerateEventsForChanges","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","entries","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","writeTreeAddMerge","changeTree","fromObject","syncTreeAckUserWrite","record","writeTreeGetWrite","affectedTree_1","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","fold","maybeChildSyncPoint","childMap","views_1","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeAddEventRegistration","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","SyncPoint","foreachChild","childSyncPoint","viewAlreadyExists","queryKey","queriesToStop","queries_1","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","viewGetServerCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","syncTree_","path_","DeferredValueProvider","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","parent","childCount","treeSubTree","pathObj","Tree","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","ValidationPath","hasDotValue_1","hasActualChild_1","validationPathPush","last","validationPathPop","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","validateKey","argumentName","validatePathString","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","validateBoolean","bool","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","EventQueue","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","Repo","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","SyncTree","infoEvents","serverSyncTree_","unlisten","repoServerTime","offset","repoGenerateServerValues","taggedChildren","raw","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoOnDisconnectCancel","onDisconnectCancel","repoOnDisconnectSet","onDisconnectPut","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","snapshot","DataEvent","ref","exportVal","CancelEvent","snapshotCallback","cancelCallback","CallbackContext","expDataSnapshot","previousChildName","call","hasCancelCallback","userCallback","OnDisconnect","wrapCallback","repoOnDisconnectSetWithPriority","childrenToMerge","onDisconnectMerge","repoOnDisconnectUpdate","_orderByCalled","QueryImpl","ReferenceImpl","getModularInstance","sameRepo","samePath","sameQueryIdentifier","encodeURIComponent","pathToUrlEncodedString","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","hasAnchoredLimit","parentPath","_node","_index","DataSnapshot","childRef","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","setWithPriority","changedKey","changedValue","writeId_1","repoUpdate","cached","err","repoGetValue","callbackContext","ValueEventRegistration","getEventType","onCancel","onValue","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","userCallback_1","onceCallback","dataSnapshot","container","repoAddEventCallbackForQuery","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","off","expCallback","_value","QueryEndAtConstraint","QueryConstraint","endAt","QueryEndBeforeConstraint","queryParamsEndBefore","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","queryParamsStartAfter","startAfter","_limit","QueryLimitToFirstConstraint","newLimit","queryParamsLimitToFirst","limitToFirst","limit","QueryLimitToLastConstraint","queryParamsLimitToLast","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","_apply","equalTo","queryConstraints","queryImpl","queryConstraints_1_1","constraint","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","appName","repoManagerDeleteRepo","apiName","connectDatabaseEmulator","tokenProvider","mockUserToken","createMockUserToken","repoManagerApplyEmulatorSettings","goOffline","goOnline","resume","SERVER_TIMESTAMP","committed","TransactionResult","toJSON","runTransaction","transactionUpdate","currentState","queueNode","priorityForNode","repoStartTransaction","_delegate","validateArgCount","arguments","validateCallback","cancel","objectToMerge","newObjectToMerge","_database","exists","hasChildren","Reference","getRef","database","Query","cancelCallbackOrContext","ret","getCancelAndContextArgs_","valueCallback","expSnapshot","validateContextObject","failureCallbackOrContext","isEqual","cancelOrContext","_ReferenceImpl","_QueryImpl","transactionResult","expPromise","expRef","ExpOnDisconnect","getKey","getParent","getRoot","INTERNAL","_delete","TIMESTAMP","increment","forceDisallow","forceAllow","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","repoStats","metric","reporter","repoStatsIncrementCounter","repoInterceptServerData","customAuthImpl","Provider","ComponentContainer","setComponent","Component","instance","_repoManagerDatabaseFromApp","DataConnection","prototype","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","forceRestClient","repoManagerForceRestClient","ServerValue","registerComponent","getProvider","setServiceProps","TEST_ACCESS","setMultipleInstances","registerVersion","module","exports","registerDatabase","firebase"],"sourceRoot":""}