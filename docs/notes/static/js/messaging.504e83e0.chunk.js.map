{"version":3,"file":"static/js/messaging.504e83e0.chunk.js","mappings":"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","sources":["../node_modules/@firebase/messaging/src/interfaces/internal-message-payload.ts","../node_modules/@firebase/messaging/src/util/errors.ts","../node_modules/@firebase/messaging/src/util/constants.ts","../node_modules/@firebase/messaging/src/helpers/array-base64-translator.ts","../node_modules/@firebase/messaging/src/helpers/migrate-old-database.ts","../node_modules/@firebase/messaging/src/helpers/idb-manager.ts","../node_modules/@firebase/messaging/src/core/api.ts","../node_modules/@firebase/messaging/src/core/token-management.ts","../node_modules/@firebase/messaging/src/helpers/is-console-message.ts","../node_modules/@firebase/messaging/src/helpers/sleep.ts","../node_modules/@firebase/messaging/src/controllers/sw-controller.ts","../node_modules/@firebase/messaging/src/helpers/externalizePayload.ts","../node_modules/@firebase/messaging/src/controllers/window-controller.ts","../node_modules/@firebase/messaging/src/helpers/extract-app-config.ts","../node_modules/@firebase/messaging/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n  // eslint-disable-next-line camelcase\n  fcm_message_id: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n// Key of FCM Payload in Notification's data field.\nexport const FCM_MSG = 'FCM_MSG';\nexport const TAG = 'FirebaseMessaging: ';\n\n// Set to '1' if Analytics is enabled for the campaign\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\n\n// Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push\n// warning might be shown by the browser if the callback fails to completes by the end of onPush.\n// Experiments were ran to determine the majority onBackground message clock time. This brief\n// blocking time would allow majority of the onBackgroundMessage callback to finish.\nexport const BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;\n\n// Preparation time for client to initialize and set up the message handler.\nexport const FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from '../helpers/idb-manager';\nimport { requestDeleteToken, requestGetToken, requestUpdateToken } from './api';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription is generated and\n  // returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS,\n  DEFAULT_VAPID_KEY,\n  FCM_MSG,\n  FOREGROUND_HANDLE_PREPARATION_TIME_MS,\n  TAG\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseMessaging, MessagePayload } from '@firebase/messaging-types';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { dbGet } from '../helpers/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  // A boolean flag to determine wether an app is using onBackgroundMessage or\n  // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n  // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n  // MessagePayload if a NotificationPayload is included.\n  private isOnBackgroundMessageUsed: boolean | null = null;\n  private vapidKey: string | null = null;\n  private bgMessageHandler:\n    | null\n    | BgMessageHandler\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload> = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\n   * Unsubscribe instead.\n   *\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\n   *\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\n   * contains no notification data this method will be called and the promise it returns will be\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\n   * the developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received and a notification\n   * must be shown. The callback will be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n\n    return () => {\n      this.bgMessageHandler = null;\n    };\n  }\n\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token. This is needed\n      // because usePublicVapidKey was not available in SW. It will be removed when vapidKey becomes\n      // a parameter of getToken, or when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\n   * `notification` property will be used as the NotificationOptions object passed to\n   * showNotification. Additionally, the `title` property of the notification object will be used as\n   * the title.\n   *\n   * If there is no notification data in the payload then no notification will be shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const internalPayload = getMessagePayloadInternal(event);\n    if (!internalPayload) {\n      console.debug(\n        TAG +\n          'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.'\n      );\n      return;\n    }\n\n    // foreground handling: eventually passed to onMessage hook\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n    }\n\n    // background handling: display and pass to onBackgroundMessage hook\n    let isNotificationShown = false;\n    if (!!internalPayload.notification) {\n      await showNotification(wrapInternalPayload(internalPayload));\n      isNotificationShown = true;\n    }\n\n    // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n    // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n    if (\n      isNotificationShown === true &&\n      this.isOnBackgroundMessageUsed === false\n    ) {\n      return;\n    }\n\n    if (!!this.bgMessageHandler) {\n      const payload = externalizePayload(internalPayload);\n\n      if (typeof this.bgMessageHandler === 'function') {\n        this.bgMessageHandler(payload);\n      } else {\n        this.bgMessageHandler.next(payload);\n      }\n    }\n\n    // wait briefly to allow onBackgroundMessage to complete\n    await sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS);\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const internalPayload: MessagePayloadInternal =\n      event.notification?.data?.[FCM_MSG];\n\n    if (!internalPayload) {\n      return;\n    } else if (event.action) {\n      // User clicked on an action button. This will allow developers to act on action button clicks\n      // by using a custom onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    // Note clicking on a notification with no link set will focus the Chrome's current tab.\n    const link = getLink(internalPayload);\n    if (!link) {\n      return;\n    }\n\n    // FM should only open/focus links from app's origin.\n    const url = new URL(link, self.location.href);\n    const originUrl = new URL(self.location.origin);\n\n    if (url.host !== originUrl.host) {\n      return;\n    }\n\n    let client = await getWindowClient(url);\n\n    if (!client) {\n      client = await self.clients.openWindow(link);\n\n      // Wait three seconds for the client to initialize and set up the message handler so that it\n      // can receive the message.\n      await sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n    internalPayload.isFirebaseMessaging = true;\n    return client.postMessage(internalPayload);\n  }\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...((internalPayload.notification as unknown) as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '@firebase/messaging-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcm_message_id\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { isConsoleMessage } from '../helpers/is-console-message';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | Observer<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    const internalPayload = event.data as MessagePayloadInternal;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    // onMessageCallback is either a function or observer/subscriber.\n    // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n    // the legacy payload where some fields are in snake cases.\n    if (\n      this.onMessageCallback &&\n      internalPayload.messageType === MessageType.PUSH_RECEIVED\n    ) {\n      if (typeof this.onMessageCallback === 'function') {\n        this.onMessageCallback(\n          stripInternalFields(Object.assign({}, internalPayload))\n        );\n      } else {\n        this.onMessageCallback.next(Object.assign({}, internalPayload));\n      }\n    }\n\n    const dataPayload = internalPayload.data;\n\n    if (\n      isConsoleMessage(dataPayload) &&\n      dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      await this.logEvent(internalPayload.messageType!, dataPayload);\n    }\n  }\n\n  getVapidKey(): string | null {\n    return this.vapidKey;\n  }\n\n  getSwReg(): ServiceWorkerRegistration | undefined {\n    return this.swRegistration;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    await this.updateVapidKey(options?.vapidKey);\n    await this.updateSwReg(options?.serviceWorkerRegistration);\n\n    return getToken(\n      this.firebaseDependencies,\n      this.swRegistration!,\n      this.vapidKey!\n    );\n  }\n\n  async updateVapidKey(vapidKey?: string | undefined): Promise<void> {\n    if (!!vapidKey) {\n      this.vapidKey = vapidKey;\n    } else if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  }\n\n  async updateSwReg(\n    swRegistration?: ServiceWorkerRegistration | undefined\n  ): Promise<void> {\n    if (!swRegistration && !this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    if (!swRegistration && !!this.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  private async registerDefaultSw(): Promise<void> {\n    try {\n      this.swRegistration = await navigator.serviceWorker.register(\n        DEFAULT_SW_PATH,\n        {\n          scope: DEFAULT_SW_SCOPE\n        }\n      );\n\n      // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n      this.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: e.message\n      });\n    }\n  }\n\n  async deleteToken(): Promise<boolean> {\n    if (!this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    return deleteToken(this.firebaseDependencies, this.swRegistration!);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on message.\n   *\n   * @return The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback = nextOrObserver;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  onBackgroundMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  /**\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\n   * However, the plan to implement such feature was abandoned.\n   */\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(\n  internalPayload: MessagePayloadInternal\n): MessagePayloadInternal {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport {\n  FirebaseService,\n  _FirebaseNamespace\n} from '@firebase/app-types/private';\n\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { SwController } from './controllers/sw-controller';\nimport { WindowController } from './controllers/window-controller';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport firebase from '@firebase/app';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n"],"names":["MessageType","ERROR_MAP","_a","ERROR_FACTORY","ErrorFactory","DEFAULT_VAPID_KEY","CONSOLE_CAMPAIGN_ID","arrayToBase64","array","uint8Array","Uint8Array","btoa","String","fromCharCode","apply","__spreadArray","replace","base64ToArray","base64String","base64","repeat","length","rawData","atob","outputArray","i","charCodeAt","OLD_DB_NAME","OLD_OBJECT_STORE_NAME","migrateOldDatabase","senderId","indexedDB","databases","dbNames","map","db","name","includes","tokenDetails","openDb","oldVersion","objectStoreNames","contains","objectStore","transaction","index","get","value","_b","clear","oldDetails","auth","p256dh","endpoint","token","fcmToken","createTime","Date","now","subscriptionOptions","swScope","vapidKey","close","deleteDb","checkTokenDetails","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeDb","createObjectStore","dbGet","firebaseDependencies","key","getKey","appConfig","oldTokenDetails","dbSet","tx","put","complete","dbRemove","delete","appId","requestGetToken","getHeaders","headers","body","getBody","subscribeOptions","method","JSON","stringify","fetch","getEndpoint","json","responseData","create","errorInfo","err_1","error","message","requestUpdateToken","updateOptions","err_2","requestDeleteToken","unsubscribeOptions","err_3","ENDPOINT","installations","getToken","authToken","Headers","Accept","apiKey","web","applicationPubKey","swRegistration","Notification","permission","getPushSubscription","pushSubscription","scope","getNewToken","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","isTokenValid","console","warn","e_1","updateToken","deleteToken","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","e_2","subscription","subscribe","userVisibleOnly","applicationServerKey","isConsoleMessage","data","sleep","ms","Promise","resolve","setTimeout","isOnBackgroundMessageUsed","bgMessageHandler","self","addEventListener","e","waitUntil","_this","onPush","onSubChange","onNotificationClick","Object","SwController","this","app","callback","nextOrObserver","_c","registration","event","internalPayload","err","getMessagePayloadInternal","getClientList","debug","TAG","clientList","some","client","visibilityState","url","startsWith","hasVisibleClients","sendMessagePayloadInternalToWindows","isNotificationShown","notification","showNotification","wrapInternalPayload","payload","from","collapseKey","collapse_key","messageId","fcm_message_id","messagePayloadInternal","title","image","propagateNotificationPayload","propagateDataPayload","fcmOptions","link","analyticsLabel","analytics_label","propagateFcmOptions","externalizePayload","next","action","stopImmediatePropagation","click_action","location","origin","getLink","URL","href","originUrl","host","getWindowClient","clients","openWindow","focus","messageType","NOTIFICATION_CLICKED","isFirebaseMessaging","postMessage","wrappedInternalPayload","clientList_1","clientList_1_1","clientUrl","PUSH_RECEIVED","clientList_2_1","matchAll","type","includeUncontrolled","notificationPayloadInternal","actions","maxActions","onMessageCallback","navigator","serviceWorker","messageEventListener","WindowController","stripInternalFields","assign","dataPayload","logEvent","options","requestPermission","updateVapidKey","updateSwReg","serviceWorkerRegistration","registerDefaultSw","ServiceWorkerRegistration","register","update","catch","browserErrorMessage","permissionResult","eventType","Error","getEventType","analyticsProvider","message_id","message_name","message_time","message_device_time","Math","floor","getMissingValueError","valueName","NAMESPACE_EXPORTS","isSupported","prototype","hasOwnProperty","PushSubscription","window","cookieEnabled","firebase","Component","container","getProvider","getImmediate","configKeys_1_1","keyName","appName","projectId","messagingSenderId","extractAppConfig","setServiceProps"],"sourceRoot":""}