{"version":3,"sources":["Components/MapMarker.js","Components/MapInterface.js","Components/AddShapesToMap.js","Components/CustomZoomControl.js","Components/AddGeoJSON.js","Components/ChangeMapTile.js","Components/OtherLayer.js","Components/BrowserLocation.js","App.js","serviceWorker.js","index.js"],"names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapMarker","position","Map","center","zoom","TileLayer","attribution","url","Marker","Popup","MapInterface","mapRef","useRef","useEffect","current","map","leafletElement","setTimeout","flyTo","duration","ref","AddShapesToMap","state","Circle","color","opacity","fillOpacity","dashArray","fillColor","radius","CustomZoomControl","zoomControl","ZoomControl","zoomInText","zoomOutText","AddGeoJSON","GeoJSON","nationalParks","onEachFeature","feature","layer","properties","Name","bindPopup","addTo","ChangeMapTile","defaultCenter","whiteHouse","eisenhowerOffice","washingtonMountain","lincolnMemorial","worlwarTwoMemorial","jeffersonMemorial","OtherLayer","LayerGroup","FeatureGroup","BrowserLocation","handelOnLocationFound","e","latlng","accuracy","locate","setView","on","demoList","key","label","App","useState","demo","setDemo","className","value","onChange","target","i","getComponent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f4b16a21.chunk.js","sourcesContent":["import React from 'react';\nimport L from 'leaflet';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\nexport const MapMarker = () => {\n  const position = [28.7041, 77.1025];\n  return (\n    <Map center={position} zoom={13}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <Marker position={position}>\n        <Popup>\n          Delhi - Rohtak Rd, near gagan chouraha, opposite water tank, <br />\n          Rohini, moradabad, Delhi 110085\n        </Popup>\n      </Marker>\n    </Map>\n  );\n};\n","import React, { useRef, useEffect } from 'react';\nimport { Map, TileLayer } from 'react-leaflet';\n\nexport const MapInterface = () => {\n  const mapRef = useRef();\n\n  useEffect(() => {\n    const { current = {} } = mapRef;\n    const { leafletElement: map } = current;\n    setTimeout(() => {\n      map.flyTo([28.3852, -81.5639], 14, { duration: 3 });\n    }, 1000);\n    return () => {};\n  }, [mapRef]);\n\n  return (\n    <Map ref={mapRef} center={[39.5, -98.35]} zoom={5}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n    </Map>\n  );\n};\n","import React from 'react';\nimport { Map, TileLayer, Circle } from 'react-leaflet';\n\nexport const AddShapesToMap = () => {\n  const state = {\n    lat: 28.365724898272077,\n    lng: -81.55525436402367,\n    zoom: 13,\n  };\n  const position = [state.lat, state.lng];\n  return (\n    <Map center={position} zoom={state.zoom}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <Circle\n        color=\"yellow\"\n        opacity={1}\n        fillOpacity={0.8}\n        dashArray={12}\n        fillColor=\"cyan\"\n        radius={500}\n        center={position}\n      />\n    </Map>\n  );\n};\n","import React from 'react';\nimport { Map, TileLayer, ZoomControl } from 'react-leaflet';\n\nexport const CustomZoomControl = () => {\n  const position = [28.7041, 77.1025];\n  return (\n    <Map center={position} zoom={13} zoomControl={false}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <ZoomControl position=\"bottomright\" zoomInText=\"🧐\" zoomOutText=\"🗺️\" />\n    </Map>\n  );\n};\n","import React, { useRef, useEffect } from 'react';\nimport { Map, TileLayer } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport nationalParks from './../national-parks.json';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\nexport const AddGeoJSON = () => {\n  const mapRef = useRef();\n\n  useEffect(() => {\n    const { current = {} } = mapRef;\n    const { leafletElement: map } = current;\n    if (!map) return;\n    const parkGeojson = new L.GeoJSON(nationalParks, {\n      onEachFeature: (feature = {}, layer) => {\n        const { properties = {} } = feature;\n        const { Name } = properties;\n        layer.bindPopup(`<p>${Name}</p>`);\n      },\n    });\n    parkGeojson.addTo(map);\n    return () => {};\n  }, [mapRef]);\n\n  return (\n    <Map ref={mapRef} center={[39.5, -98.35]} zoom={5}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n    </Map>\n  );\n};\n","import React from 'react';\nimport { Map, TileLayer } from 'react-leaflet';\n\nexport const ChangeMapTile = () => {\n  const position = [28.7041, 77.1025];\n  return (\n    <Map center={position} zoom={13}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"https://earthdata.nasa.gov/eosdis/science-system-description/eosdis-components/gibs\">More info about NASA GIBS imagery </a> contributors'\n        url=\"https://gibs.earthdata.nasa.gov/wmts/epsg4326/best/BlueMarble_ShadedRelief_Bathymetry/default/EPSG3857_500m/{z}/{y}/{x}.jpeg\"\n      />\n    </Map>\n  );\n};\n","import React from 'react';\nimport {\n  Map,\n  TileLayer,\n  Circle,\n  LayerGroup,\n  FeatureGroup,\n} from 'react-leaflet';\n\nconst defaultCenter = [38.8972, -77.0369];\n\nconst whiteHouse = [38.8977, -77.0365];\nconst eisenhowerOffice = [38.898093, -77.03854];\nconst washingtonMountain = [38.8895, -77.0353];\nconst lincolnMemorial = [38.8893, -77.0502];\nconst worlwarTwoMemorial = [38.8894, -77.0405];\nconst jeffersonMemorial = [38.8814, -77.0365];\n\nexport const OtherLayer = () => {\n  return (\n    <Map center={defaultCenter} zoom={13}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <LayerGroup>\n        <Circle color=\"yellow\" radius={400} center={whiteHouse} />\n        <Circle color=\"green\" radius={200} center={eisenhowerOffice} />\n      </LayerGroup>\n      <FeatureGroup opacity={1} color=\"tomato\">\n        <Circle color=\"red\" radius={200} center={washingtonMountain} />\n        <Circle color=\"blue\" radius={200} center={lincolnMemorial} />\n        <Circle color=\"magenta\" radius={200} center={worlwarTwoMemorial} />\n        <Circle color=\"purple\" radius={200} center={jeffersonMemorial} />\n      </FeatureGroup>\n    </Map>\n  );\n};\n","import React, { useRef, useEffect } from 'react';\nimport L from 'leaflet';\nimport { Map, TileLayer } from 'react-leaflet';\n\nexport const BrowserLocation = () => {\n  const mapRef = useRef();\n\n  useEffect(() => {\n    const { current = {} } = mapRef;\n    const { leafletElement: map } = current;\n    map.locate({ setView: true });\n    map.on('locationFound', handelOnLocationFound);\n    return () => {};\n  }, [mapRef]);\n\n  function handelOnLocationFound(e) {\n    const { current = {} } = mapRef;\n    const { leafletElement: map } = current;\n    const latlng = e.latlng;\n    const radius = e.accuracy;\n    const circle = L.Circle(latlng, radius);\n    circle.addTo(map);\n    return;\n  }\n  return (\n    <Map ref={mapRef} center={[0, 0]} zoom={12}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n    </Map>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\n\nimport { MapMarker } from './Components/MapMarker';\nimport { MapInterface } from './Components/MapInterface';\nimport { AddShapesToMap } from './Components/AddShapesToMap';\nimport { CustomZoomControl } from './Components/CustomZoomControl';\nimport { AddGeoJSON } from './Components/AddGeoJSON';\nimport { ChangeMapTile } from './Components/ChangeMapTile';\nimport { OtherLayer } from './Components/OtherLayer';\nimport { BrowserLocation } from './Components/BrowserLocation';\n\nconst demoList = [\n  {\n    key: 'MapMarker',\n    label: 'Add Marker to the Map',\n  },\n  {\n    key: 'AddShapesToMap',\n    label: 'Add Shapes to the Map',\n  },\n  {\n    key: 'MapInterface',\n    label: 'Interface with the Map',\n  },\n  {\n    key: 'CustomZoomControl',\n    label: 'Custom Zoom Control',\n  },\n  {\n    key: 'AddGeoJSON',\n    label: 'Add GeoJSON to the Map',\n  },\n  {\n    key: 'OtherLayer',\n    label: 'Other layers (LayerGroup, FeatureGroup)',\n  },\n  // {\n  //   key: 'ChangeMapTile',\n  //   label: 'ChangeMapTile',\n  // },\n  {\n    key: 'BrowserLocation',\n    label: 'Browser geo Location update',\n  },\n];\nfunction App() {\n  const [demo, setDemo] = useState('MapMarker');\n\n  const getComponent = () => {\n    switch (demo) {\n      case 'MapMarker':\n        return <MapMarker />;\n      case 'AddShapesToMap':\n        return <AddShapesToMap />;\n      case 'MapInterface':\n        return <MapInterface />;\n      case 'CustomZoomControl':\n        return <CustomZoomControl />;\n      case 'AddGeoJSON':\n        return <AddGeoJSON />;\n      case 'OtherLayer':\n        return <OtherLayer />;\n      case 'ChangeMapTile':\n        return <ChangeMapTile />;\n      case 'BrowserLocation':\n        return <BrowserLocation />;\n      default:\n        break;\n    }\n  };\n  return (\n    <div className=\"App\">\n      <select value={demo} onChange={(e) => setDemo(e.target.value)}>\n        {demoList.map((i) => (\n          <option key={i.key} value={i.key}>\n            {i.label}\n          </option>\n        ))}\n      </select>\n      {getComponent()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}