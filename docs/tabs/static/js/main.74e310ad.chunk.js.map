{"version":3,"sources":["hero-bcg.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","tabs","name","content","useState","activeTab","setActiveTab","className","src","hreoImg","alt","map","tab","key","onClick","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,uC,+JC4E5BC,MAzEf,WACE,IAAMC,EAAO,CACX,CACEC,KAAM,UACNC,QACE,gbAEJ,CACED,KAAM,SACNC,QACE,ugBAEJ,CACED,KAAM,QACNC,QACE,0iBAfO,EAmBqBC,mBAAS,WAnB9B,mBAmBNC,EAnBM,KAmBKC,EAnBL,KAwBb,OACE,yBAAKC,UAAU,OACb,6BAASA,UAAU,WACjB,yBAAKA,UAAU,SACb,qCACA,wGAMF,yBAAKA,UAAU,+BACb,6BAASA,UAAU,aACjB,yBAAKC,IAAKC,IAASC,IAAI,UAEzB,6BAASH,UAAU,SACjB,yBAAKA,UAAU,iBACZN,EAAKU,KAAI,SAACC,GAAD,OACR,4BACEC,IAAKD,EAAIV,KACTK,UAAS,kBACPF,IAAcO,EAAIV,KAAO,SAAW,IAEtCY,QAAS,SAACC,GAAD,OA1BLb,EA0BuBU,EAAIV,UAzB7CI,EAAaJ,GADI,IAACA,IA4BHU,EAAIV,UAIX,yBAAKK,UAAU,iBACZN,EAAKU,KAAI,SAACC,GAAD,OACR,yBACEC,IAAKD,EAAIV,KACTK,UAAS,kBACPF,IAAcO,EAAIV,KAAO,SAAW,KAGtC,4BAAKU,EAAIV,MACT,2BAAIU,EAAIT,mBCrDNa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.74e310ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero-bcg.1bc167c5.jpeg\";","import React, { useState } from 'react';\nimport hreoImg from './hero-bcg.jpeg';\n\nfunction App() {\n  const tabs = [\n    {\n      name: 'history',\n      content:\n        \"I'm baby wolf pickled schlitz try-hard normcore marfa man bun mumblecore vice pop-up XOXO lomo kombucha glossier bicycle rights. Umami kinfolk salvia jean shorts offal venmo. Knausgaard tilde try-hard, woke fixie banjo man bun. Small batch tumeric mustache tbh wayfarers 8-bit shaman chartreuse tacos. Viral direct trade hoodie ugh chambray, craft beer pork belly flannel tacos single-origin coffee art party migas plaid pop-up.\"\n    },\n    {\n      name: 'vision',\n      content:\n        'Man bun PBR&B keytar copper mug prism, hell of helvetica. Synth crucifix offal deep v hella biodiesel. Church-key listicle polaroid put a bird on it chillwave palo santo enamel pin, tattooed meggings franzen la croix cray. Retro yr aesthetic four loko tbh helvetica air plant, neutra palo santo tofu mumblecore. Hoodie bushwick pour-over jean shorts chartreuse shabby chic. Roof party hammock master cleanse pop-up truffaut, bicycle rights skateboard affogato readymade sustainable deep v live-edge schlitz narwhal.'\n    },\n    {\n      name: 'goals',\n      content:\n        ' Chambray authentic truffaut, kickstarter brunch taxidermy vape heirloom four dollar toast raclette shoreditch church-key. Poutine etsy tote bag, cred fingerstache leggings cornhole everyday carry blog gastropub. Brunch biodiesel sartorial mlkshk swag, mixtape hashtag marfa readymade direct trade man braid cold-pressed roof party. Small batch adaptogen coloring book heirloom. Letterpress food truck hammock literally hell of wolf beard adaptogen everyday carry. Dreamcatcher pitchfork yuccie, banh mi salvia venmo photo booth quinoa chicharrones.'\n    }\n  ];\n\n  const [activeTab, setActiveTab] = useState('history');\n\n  const onTabClick = (name) => {\n    setActiveTab(name);\n  };\n  return (\n    <div className=\"App\">\n      <section className=\"section\">\n        <div className=\"title\">\n          <h2>about</h2>\n          <p>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Earum,\n            aperiam!\n          </p>\n        </div>\n\n        <div className=\"about-center section-center\">\n          <article className=\"about-img\">\n            <img src={hreoImg} alt=\"hero\" />\n          </article>\n          <article className=\"about\">\n            <div className=\"btn-container\">\n              {tabs.map((tab) => (\n                <button\n                  key={tab.name}\n                  className={`tab-btn ${\n                    activeTab === tab.name ? 'active' : ''\n                  }`}\n                  onClick={(e) => onTabClick(tab.name)}\n                >\n                  {tab.name}\n                </button>\n              ))}\n            </div>\n            <div className=\"about-content\">\n              {tabs.map((tab) => (\n                <div\n                  key={tab.name}\n                  className={`content ${\n                    activeTab === tab.name ? 'active' : ''\n                  }`}\n                >\n                  <h4>{tab.name}</h4>\n                  <p>{tab.content}</p>\n                </div>\n              ))}\n            </div>\n          </article>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}