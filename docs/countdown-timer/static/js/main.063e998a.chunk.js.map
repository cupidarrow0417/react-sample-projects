{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","moment","add","giveawayDate","format","item","setTimer","diff","valueOf","days","Math","floor","hours","minutes","seconds","timeLeft","setTimeLeft","useEffect","timer","setInterval","clearInterval","className","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNA6EeA,MA1Ef,WAAgB,IAAD,EACUC,mBAASC,MAASC,IAAI,GAAI,SAA1CC,EADM,oBAOPC,EAAS,SAACC,GAAD,OAAWA,EAAO,GAAR,WAAkBA,GAASA,GAE9CC,EAAW,WACf,IAAMC,EAAOJ,EAAaK,UAAYP,MAASO,UAK/C,MAAO,CAAEC,KAJIL,EAAOM,KAAKC,MAAMJ,EANlB,QAUEK,MAHDR,EAAOM,KAAKC,MAAOJ,EAPpB,MADC,OAWQM,QAFNT,EAAOM,KAAKC,MAAOJ,EATrB,KADE,MAYeO,QADfV,EAAOM,KAAKC,MAAOJ,EAXnB,IAWuC,QAd5C,EAkBmBP,mBAASM,KAlB5B,mBAkBNS,EAlBM,KAkBIC,EAlBJ,KAyBb,OALAC,qBAAU,WACR,IAAMC,EAAQC,aAAY,WAAQH,EAAYV,OAAe,KAC7D,OAAO,kBAAMc,cAAcF,MAC1B,CAACH,IAGF,yBAAKM,UAAU,OACb,6BAASA,UAAU,kBACjB,6BAASA,UAAU,YACjB,yBAAKC,IAAI,cAAcC,IAAI,UAE7B,6BAASF,UAAU,aACjB,mDACA,wBAAIA,UAAU,YAAd,oBACoBpB,IAAOE,GAAcC,OAAO,SAEhD,yQAMA,yBAAKiB,UAAU,YACb,yBAAKA,UAAU,mBACb,6BACE,wBAAIA,UAAU,QAAQN,EAASN,MAC/B,wCAGJ,yBAAKY,UAAU,mBACb,6BACE,wBAAIA,UAAU,SAASN,EAASH,OAChC,yCAGJ,yBAAKS,UAAU,mBACb,6BACE,wBAAIA,UAAU,WAAWN,EAASF,SAClC,wCAGJ,yBAAKQ,UAAU,mBACb,6BACE,wBAAIA,UAAU,WAAWN,EAASD,SAClC,6CCvDIU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.063e998a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment'\n\nfunction App() {\n  const [giveawayDate] = useState(moment().add(30, 'days'));\n\n  const oneMinute = 60 * 1000;\n  const oneHour = 60 * oneMinute;\n  const oneDay = 24 * oneHour;\n\n  const format = (item) => (item < 10) ? `0${item}` : item;\n\n  const setTimer = () => {\n    const diff = giveawayDate.valueOf() - moment().valueOf();\n    const days = format(Math.floor(diff / oneDay));\n    const hours = format(Math.floor((diff % oneDay) / oneHour));\n    const minutes = format(Math.floor((diff % oneHour) / oneMinute));\n    const seconds = format(Math.floor((diff % oneMinute) / 1000));\n    return { days, hours, minutes, seconds };\n  }\n\n  const [timeLeft, setTimeLeft] = useState(setTimer());\n\n  useEffect(() => {\n    const timer = setInterval(() => { setTimeLeft(setTimer()) }, 1000);\n    return () => clearInterval(timer);\n  }, [timeLeft]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"App\">\n      <section className=\"section-center\">\n        <article className=\"gift-img\">\n          <img src=\"./gift.jpeg\" alt=\"gift\" />\n        </article>\n        <article className=\"gift-info\">\n          <h3>old iphone giveaway</h3>\n          <h4 className=\"giveaway\">\n            giveaway ends on {moment(giveawayDate).format('LLLL')}\n          </h4>\n          <p>\n            Lorem ipsum dolor sit, amet consectetur adipisicing elit.\n            Reprehenderit molestiae cum libero atque ut voluptate qui consectetur\n            aliquid incidunt voluptatem quos, dolore, non commodi quaerat aliquam\n            eligendi, quisquam totam blanditiis.\n        </p>\n          <div className=\"deadline\">\n            <div className=\"deadline-format\">\n              <div>\n                <h4 className=\"days\">{timeLeft.days}</h4>\n                <span>days</span>\n              </div>\n            </div>\n            <div className=\"deadline-format\">\n              <div>\n                <h4 className=\"hours\">{timeLeft.hours}</h4>\n                <span>hours</span>\n              </div>\n            </div>\n            <div className=\"deadline-format\">\n              <div>\n                <h4 className=\"minutes\">{timeLeft.minutes}</h4>\n                <span>mins</span>\n              </div>\n            </div>\n            <div className=\"deadline-format\">\n              <div>\n                <h4 className=\"seconds\">{timeLeft.seconds}</h4>\n                <span>secs</span>\n              </div>\n            </div>\n          </div>\n        </article>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}