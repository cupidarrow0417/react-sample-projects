{"version":3,"sources":["utils/movies.js","components/theater/Theater.js","components/Info/Info.js","App.js","serviceWorker.js","index.js"],"names":["status","updateDataStore","items","localStorage","setItem","JSON","stringify","moviesData","forEach","m","theaterSeats","Array","seats","row","fill","map","_","i","arr","index","col","push","Math","floor","random","length","helpers","get","getItem","parse","update","data","clear","Theater","props","containerRef","useRef","countRef","totalRef","updateCount","e","console","log","filter","e1","current","innerText","price","useEffect","style","backgroundColor","className","ref","rows","key","cols","onClick","target","classList","contains","toggle","updateMovie","selectSeatHandler","id","Info","App","useState","movieUtils","movies","setMovies","currentMovie","setCurrentMovie","movieSelectRef","onChange","value","defaultValue","movie","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4faca4e8.chunk.js","sourcesContent":["import moviesData from '../moviesData.json';\n\nconst STORE_KEY = 'movies';\n\nconst status = ['', 'occupied'];\nconst geRrandomStatus = () => status[Math.floor(Math.random() * status.length)];\n\nmoviesData.forEach((m) => {\n  m.theaterSeats = new Array(m.seats.row).fill([]).map((_, i) => {\n    const arr = [];\n    for (let index = 0; index < m.seats.col; index++) {\n      arr.push({ status: geRrandomStatus() });\n    }\n    return arr;\n  });\n});\n\nfunction updateDataStore(items = []) {\n  localStorage.setItem(STORE_KEY, JSON.stringify(items));\n}\n\nfunction getFromDataStore() {\n  return localStorage.getItem(STORE_KEY);\n}\n\nfunction get() {\n  const items = getFromDataStore();\n  if (items) return JSON.parse(items);\n  updateDataStore(moviesData);\n  return moviesData;\n}\n\nconst helpers = {\n  get,\n  update: (data) => updateDataStore(data),\n  clear: () => updateDataStore(),\n};\n\nexport default helpers;\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './Theater.css';\n\nconst Theater = (props) => {\n  const containerRef = useRef(null);\n  const countRef = useRef(null);\n  const totalRef = useRef(null);\n\n  const updateCount = () => {\n    let seats = 0;\n    props.theaterSeats.forEach((e) => {\n      console.log(e.filter((e1) => e1.status === 'selected'));\n      seats += e.filter((e1) => e1.status === 'selected').length;\n    });\n    countRef.current.innerText = seats;\n    totalRef.current.innerText = seats * props.price;\n  };\n\n  function selectSeatHandler(e, row, col) {\n    if (\n      e.target.classList.contains('seat') &&\n      !e.target.classList.contains('occupied')\n    ) {\n      props.theaterSeats[row][col].status = e.target.classList.toggle(\n        'selected'\n      )\n        ? 'selected'\n        : '';\n    }\n    updateCount();\n    props.updateMovie(props.theaterSeats);\n  }\n\n  useEffect(() => {\n    updateCount();\n  }, []);\n\n  return (\n    <div style={{ backgroundColor: props.backgroundColor }}>\n      <div className=\"container\" ref={containerRef}>\n        <div className=\"screen\"></div>\n        {props.theaterSeats.map((rows, row) => (\n          <div className=\"row\" key={row}>\n            {rows.map((cols, col) => (\n              <div\n                className={`seat ${cols.status}`}\n                key={`${row - col}`}\n                onClick={(e) => selectSeatHandler(e, row, col)}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <p className=\"text\">\n        You have selected{'  '}\n        <span id=\"count\" ref={countRef}>\n          0\n        </span>{' '}\n        seats for a price of $\n        <span id=\"total\" ref={totalRef}>\n          0\n        </span>\n      </p>\n    </div>\n  );\n};\n\nTheater.propTypes = {\n  seats: PropTypes.object.isRequired,\n  price: PropTypes.number.isRequired,\n  theaterSeats: PropTypes.array.isRequired,\n  backgroundColor: PropTypes.string.isRequired,\n  updateMovie: PropTypes.func.isRequired,\n};\n\nexport default Theater;\n","import React from 'react';\nimport './Info.css';\n\nconst Info = () => {\n  return (\n    <ul className=\"showcase\">\n      <li>\n        <div className=\"seat\"></div>\n        <small>N/A</small>\n      </li>\n      <li>\n        <div className=\"seat selected\"></div>\n        <small>Selected</small>\n      </li>\n      <li>\n        <div className=\"seat occupied\"></div>\n        <small>Occupied</small>\n      </li>\n    </ul>\n  );\n};\n\nexport default Info;\n","import React, { useState, useRef } from 'react';\nimport movieUtils from './utils/movies';\nimport Theater from './components/theater/Theater';\nimport Info from './components/Info/Info';\n\nfunction App() {\n  const [movies, setMovies] = useState(movieUtils.get());\n  const [currentMovie, setCurrentMovie] = useState(0);\n  const movieSelectRef = useRef(null);\n\n  function chageMovieHandler(e) {\n    setCurrentMovie(e.target.value);\n  }\n\n  function updateMovie(theaterSeats) {\n    movies[currentMovie].theaterSeats = theaterSeats;\n    setMovies(movies);\n    movieUtils.update(movies);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"movie-container\">\n        <label>Pick a movie:</label>\n        <select\n          id=\"movie\"\n          ref={movieSelectRef}\n          onChange={chageMovieHandler}\n          defaultValue=\"0\"\n        >\n          {movies.map((movie, i) => (\n            <option\n              key={movie.id}\n              value={i}\n            >{`${movie.name} ($${movie.price})`}</option>\n          ))}\n        </select>\n      </div>\n      <Info />\n      <Theater\n        key={movies[currentMovie].id}\n        seats={movies[currentMovie].seats}\n        price={movies[currentMovie].price}\n        theaterSeats={movies[currentMovie].theaterSeats}\n        backgroundColor={movies[currentMovie].backgroundColor}\n        name={movies[currentMovie].name}\n        updateMovie={updateMovie}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}