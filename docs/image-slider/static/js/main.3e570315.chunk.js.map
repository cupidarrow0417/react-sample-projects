{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","images","process","useState","selctedImage","setSelectedImage","sliderRef","useRef","className","id","src","alt","onClick","current","scrollLeft","ref","map","img","index","key","e","onSelectImage","defaultValue","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4KAuFeA,MArFf,WACE,IAAMC,EAAS,CAAC,GAAD,OACVC,IADU,+BAEVA,IAFU,+BAGVA,IAHU,+BAIVA,IAJU,iCAKVA,IALU,iCAMVA,IANU,iCAOVA,IAPU,wBADF,EAW4BC,mBAASF,EAAO,IAX5C,mBAWNG,EAXM,KAWQC,EAXR,KAYPC,EAAYC,iBAAO,MAczB,OACE,yBAAKC,UAAU,OACb,yBAAKC,GAAG,mBACN,yBAAKD,UAAU,UACb,yBAAKC,GAAG,WAAWC,IAAKN,EAAcO,IAAI,WAE1C,yBAAKF,GAAG,iBACN,yBACEA,GAAG,YACHD,UAAU,QACVI,QAtBM,WAChBN,EAAUO,QAAQC,YAAc,KAsBtBJ,IAAG,UAAKR,IAAL,0BACHS,IAAI,eAGN,yBAAKF,GAAG,SAASM,IAAKT,GACnBL,EAAOe,KAAI,SAACC,EAAKC,GAAN,OACV,yBACEC,IAAKD,EACLV,UAAS,oBACPJ,IAAiBa,EAAM,SAAW,IAEpCL,QAAS,SAACQ,GAAD,OA1BH,SAACH,GACrBZ,EAAiBY,GAyBaI,CAAcJ,IAC9BP,IAAKO,EACLN,IAAI,YAKV,yBACEF,GAAG,aACHD,UAAU,QACVI,QAxCO,WACjBN,EAAUO,QAAQC,YAAc,KAwCtBJ,IAAG,UAAKR,IAAL,2BACHS,IAAI,kBAKV,yBAAKH,UAAU,UACb,6CACA,6BACA,sCAEA,oRAOA,2BAAOc,aAAa,IAAIC,KAAK,WAC7B,4BAAQf,UAAU,gBAAlB,mBCpEUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3e570315.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\n\nfunction App() {\n  const images = [\n    `${process.env.PUBLIC_URL}/images/shoe1.jpg`,\n    `${process.env.PUBLIC_URL}/images/shoe2.jpg`,\n    `${process.env.PUBLIC_URL}/images/shoe3.jpg`,\n    `${process.env.PUBLIC_URL}/images/preset1.png`,\n    `${process.env.PUBLIC_URL}/images/preset4.jpg`,\n    `${process.env.PUBLIC_URL}/images/preset5.jpg`,\n    `${process.env.PUBLIC_URL}/images/preset8.jpg`\n  ];\n\n  const [selctedImage, setSelectedImage] = useState(images[0]);\n  const sliderRef = useRef(null);\n\n  const slideLeft = () => {\n    sliderRef.current.scrollLeft -= 180;\n  };\n\n  const slideRight = () => {\n    sliderRef.current.scrollLeft += 180;\n  };\n\n  const onSelectImage = (img) => {\n    setSelectedImage(img);\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"content-wrapper\">\n        <div className=\"column\">\n          <img id=\"featured\" src={selctedImage} alt=\"bg img\" />\n\n          <div id=\"slide-wrapper\">\n            <img\n              id=\"slideLeft\"\n              className=\"arrow\"\n              onClick={slideLeft}\n              src={`${process.env.PUBLIC_URL}/images/arrow-left.png`}\n              alt=\"arrow-left\"\n            />\n\n            <div id=\"slider\" ref={sliderRef}>\n              {images.map((img, index) => (\n                <img\n                  key={index}\n                  className={`thumbnail ${\n                    selctedImage === img ? 'active' : ''\n                  }`}\n                  onClick={(e) => onSelectImage(img)}\n                  src={img}\n                  alt=\"img\"\n                />\n              ))}\n            </div>\n\n            <img\n              id=\"slideRight\"\n              className=\"arrow\"\n              onClick={slideRight}\n              src={`${process.env.PUBLIC_URL}/images/arrow-right.png`}\n              alt=\"arrow-right\"\n            />\n          </div>\n        </div>\n\n        <div className=\"column\">\n          <h1>Awesome Shoes</h1>\n          <hr />\n          <h3>$89.99</h3>\n\n          <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting\n            industry. Lorem Ipsum has been the industry's standard dummy text\n            ever since the 1500s, when an unknown printer took a galley of type\n            and scrambled it to make a type specimen book.\n          </p>\n\n          <input defaultValue=\"1\" type=\"number\" />\n          <button className=\"btn btn-dark\">Add to Cart</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}