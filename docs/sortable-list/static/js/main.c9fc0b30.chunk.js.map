{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["richestPeople","createList","map","a","value","sort","Math","random","b","name","answer","App","useState","people","setPeople","dragStartIndex","setDragStartIndex","dragOver","e","preventDefault","dragEnter","dragLeave","className","id","p","index","onDragOver","onDrop","idx","list","dragDrop","onDragEnter","onDragLeave","key","draggable","onDragStart","onClick","stopPropagation","forEach","person","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MACMA,EAAgB,CACpB,aACA,aACA,iBACA,kBACA,mBACA,iBACA,gBACA,kBACA,oBACA,cAEIC,EAAa,iBACjB,UAAID,GACDE,KAAI,SAACC,GAAD,MAAQ,CAAEC,MAAOD,EAAGE,KAAMC,KAAKC,aACnCF,MAAK,SAACF,EAAGK,GAAJ,OAAUL,EAAEE,KAAOG,EAAEH,QAC1BH,KAAI,SAACC,GAAD,MAAQ,CAAEM,KAAMN,EAAEC,MAAOM,OAAQ,QA2E3BC,MAzEf,WAAgB,IAAD,EACeC,mBAASX,KADxB,mBACNY,EADM,KACEC,EADF,OAE+BF,oBAAS,GAFxC,mBAENG,EAFM,KAEUC,EAFV,KA2BPC,EAAW,SAACC,GAChBA,EAAEC,kBAEEC,EAAY,SAACF,KACbG,EAAY,SAACH,KAEnB,OACE,oCACE,iDACA,qFACA,wBAAII,UAAU,iBAAiBC,GAAG,kBAC/BV,EAAOX,KAAI,SAACsB,EAAGC,GAAJ,OACV,wBACEH,UAAWE,EAAEd,OACbgB,WAAYT,EACZU,OAAQ,SAACT,GAAD,OArBD,SAACU,GAChB,IAAMC,EAAI,YAAOhB,GADO,EAGY,CAACgB,EAAKd,GAAiBc,EAAKD,IAA/DC,EAAKD,GAHkB,KAGZC,EAAKd,GAHO,KAIxBD,EAAUe,GAiBaC,CAASL,IACxBM,YAAaX,EACbY,YAAaX,EACbY,IAAKT,EAAEf,MAEP,0BAAMa,UAAU,UAAUG,EAAQ,GAClC,yBACEH,UAAU,YACVY,WAAS,EACTC,YAAa,SAACjB,GAjCxBF,EAiCwCS,KAE9B,uBAAGH,UAAU,eAAeE,EAAEf,MAC9B,uBAAGa,UAAU,4BAKrB,6BACE,4BAAQA,UAAU,WAAWc,QA/Cd,WACnBtB,EAAUb,OA8CN,aAEE,uBAAGqB,UAAU,qBAEf,4BAAQA,UAAU,YAAYc,QA5DjB,SAAClB,GAClBA,EAAEmB,kBACF,IAAMR,EAAI,YAAOhB,GACjBb,EAAcsC,SAAQ,SAACC,EAAQd,GAC7BI,EAAKJ,GAAOf,OAAS6B,IAAWV,EAAKJ,GAAOhB,KAAO,QAAU,WAE/DK,EAAUe,KAsDN,mBAEE,uBAAGP,UAAU,2BCzEHkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c9fc0b30.chunk.js","sourcesContent":["import React, { useState } from 'react';\nconst richestPeople = [\n  'Jeff Bezos',\n  'Bill Gates',\n  'Warren Buffett',\n  'Bernard Arnault',\n  'Carlos Slim Helu',\n  'Amancio Ortega',\n  'Larry Ellison',\n  'Mark Zuckerberg',\n  'Michael Bloomberg',\n  'Larry Page',\n];\nconst createList = () =>\n  [...richestPeople]\n    .map((a) => ({ value: a, sort: Math.random() }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => ({ name: a.value, answer: '' }));\n\nfunction App() {\n  const [people, setPeople] = useState(createList());\n  const [dragStartIndex, setDragStartIndex] = useState(false);\n\n  const checkOrder = (e) => {\n    e.stopPropagation();\n    const list = [...people];\n    richestPeople.forEach((person, index) => {\n      list[index].answer = person === list[index].name ? 'right' : 'wrong';\n    });\n    setPeople(list);\n  };\n\n  const resethandler = () => {\n    setPeople(createList());\n  };\n\n  const dragStart = (idx) => {\n    setDragStartIndex(idx);\n  };\n\n  const dragDrop = (idx) => {\n    const list = [...people];\n    // swap with destructaring\n    [list[idx], list[dragStartIndex]] = [list[dragStartIndex], list[idx]];\n    setPeople(list);\n  };\n  const dragOver = (e) => {\n    e.preventDefault();\n  };\n  const dragEnter = (e) => {};\n  const dragLeave = (e) => {};\n\n  return (\n    <>\n      <h1>10 Richest People</h1>\n      <p>Drag and drop the items into their corresponding spots</p>\n      <ul className=\"draggable-list\" id=\"draggable-list\">\n        {people.map((p, index) => (\n          <li\n            className={p.answer}\n            onDragOver={dragOver}\n            onDrop={(e) => dragDrop(index)}\n            onDragEnter={dragEnter}\n            onDragLeave={dragLeave}\n            key={p.name}\n          >\n            <span className=\"number\">{index + 1}</span>\n            <div\n              className=\"draggable\"\n              draggable\n              onDragStart={(e) => dragStart(index)}\n            >\n              <p className=\"person-name\">{p.name}</p>\n              <i className=\"fas fa-grip-lines\"></i>\n            </div>\n          </li>\n        ))}\n      </ul>\n      <div>\n        <button className=\"rest-btn\" onClick={resethandler}>\n          Reset &nbsp;\n          <i className=\"fas fa-redo-alt\"></i>\n        </button>\n        <button className=\"check-btn\" onClick={checkOrder}>\n          Check Order &nbsp;\n          <i className=\"fas fa-paper-plane\"></i>\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}