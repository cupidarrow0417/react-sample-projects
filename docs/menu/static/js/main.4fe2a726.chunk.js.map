{"version":3,"sources":["components/menuItem/menuItem.js","components/categoryButton/categoryButton.js","App.js","serviceWorker.js","index.js"],"names":["MenuItem","props","className","src","img","alt","title","price","desc","CategoryButton","type","active","data-id","category","onClick","onClickFilter","App","categories","menuItems","reduce","values","item","includes","push","map","i","useState","filterdMenuItem","setFilterdMenuItem","allCategories","setAllCategories","filterMenuItems","forEach","newMenus","filter","menuItem","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"w1EAyBeA,MArBf,SAAkBC,GACd,OACI,6BAASC,UAAU,aACf,yBAAKC,IAAKF,EAAMG,IAAKC,IAAI,YAAYH,UAAU,UAC/C,yBAAKA,UAAU,aACX,gCACI,4BAAKD,EAAMK,OACX,wBAAIJ,UAAU,SAASD,EAAMM,QAEjC,uBAAGL,UAAU,aAAaD,EAAMO,S,aCQjCC,MAjBf,SAAwBR,GACpB,OACI,4BACIS,KAAK,SACLR,UAAS,qBAAgBD,EAAMU,OAAS,SAAW,IACnDC,UAASX,EAAMY,SACfC,QAAS,kBAAMb,EAAMc,cAAcd,EAAMY,YAExCZ,EAAMY,WCkDJG,MAzDf,WACE,IAAMC,EAAaC,EAAUC,QAAO,SAACC,EAAQC,GAI3C,OAHKD,EAAOE,SAASD,EAAKR,WACxBO,EAAOG,KAAKF,EAAKR,UAEZO,IACN,CAAC,QAAQI,KAAI,SAACC,GACf,MAAU,QAANA,EAAoB,CAAEZ,SAAUY,EAAGd,QAAQ,GACxC,CAAEE,SAAUY,EAAGd,QAAQ,MARnB,EAWiCe,mBAASR,GAX1C,mBAWNS,EAXM,KAWWC,EAXX,OAY6BF,mBAAST,GAZtC,mBAYNY,EAZM,KAYSC,EAZT,KAcPC,EAAkB,SAAClB,GAKvB,GAJAI,EAAWe,SAAQ,SAACP,GAClBA,EAAEd,OAAUc,EAAEZ,WAAaA,KAE7BiB,EAAiBb,GACA,QAAbJ,EAAoB,OAAOe,EAAmBV,GAClD,IAAMe,EAAWf,EAAUgB,QAAO,SAAAC,GAAQ,OAAIA,EAAStB,WAAaA,KACpE,OAAOe,EAAmBK,IAG5B,OACE,yBAAK/B,UAAU,OACb,6BAASA,UAAU,QACjB,yBAAKA,UAAU,SACb,wCACA,yBAAKA,UAAU,eAEjB,yBAAKA,UAAU,iBACZ2B,EAAcL,KAAI,SAACH,EAAMe,GAAP,OACjB,kBAAC,EAAD,CACEA,IAAKA,EACLvB,SAAUQ,EAAKR,SACfE,cAAegB,EACfpB,OAAQU,EAAKV,aAInB,yBAAKT,UAAU,kBACZyB,EAAgBH,KAAI,SAACH,GAAD,OACnB,kBAAC,EAAD,CACEe,IAAKf,EAAKgB,GACV/B,MAAOe,EAAKf,MACZF,IAAKiB,EAAKjB,IACVI,KAAMa,EAAKb,KACXD,MAAOc,EAAKd,eCzCN+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4fe2a726.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menuItem.css';\n\nfunction MenuItem(props) {\n    return (\n        <article className=\"menu-item\">\n            <img src={props.img} alt=\"menu item\" className=\"photo\" />\n            <div className=\"item-info\">\n                <header>\n                    <h4>{props.title}</h4>\n                    <h4 className=\"price\">{props.price}</h4>\n                </header>\n                <p className=\"item-text\">{props.desc}</p>\n            </div>\n        </article>\n    );\n}\n\nMenuItem.propTypes = {\n    img: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    desc: PropTypes.string.isRequired,\n};\nexport default MenuItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './categoryButton.css';\n\nfunction CategoryButton(props) {\n    return (\n        <button\n            type=\"button\"\n            className={`filter-btn ${props.active ? 'active' : ''}`}\n            data-id={props.category}\n            onClick={() => props.onClickFilter(props.category)}\n        >\n            {props.category}\n        </button>\n    );\n}\n\nCategoryButton.propTypes = {\n    category: PropTypes.string.isRequired,\n    onClickFilter: PropTypes.func.isRequired,\n};\nexport default CategoryButton;\n","import React, { useState } from 'react';\nimport MenuItem from './components/menuItem/menuItem';\nimport menuItems from './menuItems';\nimport CategoryButton from './components/categoryButton/categoryButton';\n\nfunction App() {\n  const categories = menuItems.reduce((values, item) => {\n    if (!values.includes(item.category)) {\n      values.push(item.category);\n    }\n    return values;\n  }, ['all']).map((i) => {\n    if (i === 'all') return { category: i, active: true };\n    return { category: i, active: false };\n  });\n\n  const [filterdMenuItem, setFilterdMenuItem] = useState(menuItems);\n  const [allCategories, setAllCategories] = useState(categories);\n\n  const filterMenuItems = (category) => {\n    categories.forEach((i) => {\n      i.active = (i.category === category);\n    });\n    setAllCategories(categories);\n    if (category === 'all') return setFilterdMenuItem(menuItems);\n    const newMenus = menuItems.filter(menuItem => menuItem.category === category);\n    return setFilterdMenuItem(newMenus);\n  };\n\n  return (\n    <div className=\"App\">\n      <section className=\"menu\">\n        <div className=\"title\">\n          <h2>our menu</h2>\n          <div className=\"underline\"></div>\n        </div>\n        <div className=\"btn-container\">\n          {allCategories.map((item, key) =>\n            <CategoryButton\n              key={key}\n              category={item.category}\n              onClickFilter={filterMenuItems}\n              active={item.active}\n            />\n          )}\n        </div>\n        <div className=\"section-center\">\n          {filterdMenuItem.map((item) =>\n            <MenuItem\n              key={item.id}\n              title={item.title}\n              img={item.img}\n              desc={item.desc}\n              price={item.price}\n            />\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}