{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","copyrightYear","Date","getFullYear","navbarRef","useRef","linksContainerRef","topLinkRef","linksRef","homeRef","servicesRef","aboutRef","toursRef","blocks","home","about","services","tours","scrollLinksClickHandlers","e","href","preventDefault","id","slice","element","current","navHeight","getBoundingClientRect","height","containerHeight","fixedNav","classList","contains","position","offsetTop","window","scrollTo","left","top","style","useEffect","addEventListener","scrollHeight","pageYOffset","add","remove","className","ref","src","alt","onClick","linksHeight","name","map","link","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84ea8546.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nfunction App() {\n  const copyrightYear = new Date().getFullYear();\n  const links = [\n    { name: 'home', href: '#home' },\n    { name: 'about', href: '#about' },\n    { name: 'services', href: '#services' },\n    { name: 'tours', href: '#tours' }\n  ];\n  const navbarRef = useRef(null);\n  const linksContainerRef = useRef(null);\n  const topLinkRef = useRef(null);\n  const linksRef = useRef(null);\n\n  const homeRef = useRef(null);\n  const servicesRef = useRef(null);\n  const aboutRef = useRef(null);\n  const toursRef = useRef(null);\n\n  const blocks = {\n    home: homeRef,\n    about: aboutRef,\n    services: servicesRef,\n    tours: toursRef,\n  };\n\n  function navBarToggleHandler() {\n    const linksHeight = linksRef.current.getBoundingClientRect().height;\n    const containerHeight = linksContainerRef.current.getBoundingClientRect().height;\n    linksContainerRef.current.style.height = (containerHeight === 0) ? `${linksHeight}px` : 0;\n  }\n\n  function scrollLinksClickHandlers(e, href) {\n    // prevent default\n    e.preventDefault();\n    // navigate to specific spot\n    const id = href.slice(1);\n    const element = blocks[id].current;\n\n    const navHeight = navbarRef.current.getBoundingClientRect().height;\n    const containerHeight = linksContainerRef.current.getBoundingClientRect().height;\n    const fixedNav = navbarRef.current.classList.contains(\"fixed-nav\");\n    let position = element.offsetTop - navHeight;\n\n    if (!fixedNav) {\n      position = position - navHeight;\n    }\n    if (navHeight > 82) {\n      position = position + containerHeight;\n    }\n\n    window.scrollTo({\n      left: 0,\n      top: position,\n    });\n    // close\n    linksContainerRef.current.style.height = 0;\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", function (e) {\n      const scrollHeight = window.pageYOffset;\n      const navHeight = navbarRef.current.getBoundingClientRect().height;\n      if (scrollHeight > navHeight) {\n        navbarRef.current.classList.add(\"fixed-nav\");\n      } else {\n        navbarRef.current.classList.remove(\"fixed-nav\");\n      }\n      // setup back to top link\n\n      if (scrollHeight > 500) {\n        topLinkRef.current.classList.add(\"show-link\");\n      } else {\n        topLinkRef.current.classList.remove(\"show-link\");\n      }\n    });\n    return () => { };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header id=\"home\" ref={homeRef}>\n        <nav id=\"nav\" ref={navbarRef}>\n          <div className=\"nav-center\">\n            <div className=\"nav-header\">\n              <img src=\"./logo.png\" className=\"logo\" alt=\"logo\" />\n              <button className=\"nav-toggle\" onClick={navBarToggleHandler}>\n                <i className=\"fas fa-bars\"></i>\n              </button>\n            </div>\n            <div className=\"links-container\" ref={linksContainerRef}>\n              <ul className=\"links\" ref={linksRef}>\n                {links.map(link =>\n                  (<li key={link.href}>\n                    <a href={link.href} className=\"scroll-link\" onClick={(e) => scrollLinksClickHandlers(e, link.href)}>{link.name}</a>\n                  </li>)\n                )}\n              </ul>\n            </div>\n          </div>\n        </nav>\n        <div className=\"banner\">\n          <div className=\"container\">\n            <h1>scroll project</h1>\n            <p>\n              Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quas eos\n              neque sunt in? Id, necessitatibus quos quisquam distinctio\n              laudantium fugiat?\n          </p>\n            <a href=\"#tours\" className=\"scroll-link btn btn-white\">explore tours</a>\n          </div>\n        </div>\n      </header>\n      <section id=\"about\" className=\"section\" ref={aboutRef}>\n        <div className=\"title\">\n          <h2>about <span>us</span></h2>\n        </div>\n      </section>\n      <section id=\"services\" className=\"section\" ref={servicesRef}>\n        <div className=\"title\">\n          <h2>our <span>services</span></h2>\n        </div>\n      </section>\n      <section id=\"tours\" className=\"section\" ref={toursRef}>\n        <div className=\"title\">\n          <h2>featured <span>tours</span></h2>\n        </div>\n      </section>\n      <footer className=\"section\">\n        <p>\n          copyright &copy; backroads travel tours company\n          <span id=\"date\">{copyrightYear}</span>. all rights reserved\n      </p>\n      </footer>\n      <a className=\"scroll-link top-link\" href=\"#home\" ref={topLinkRef} onClick={(e) => scrollLinksClickHandlers(e, '#home')}>\n        <i className=\"fas fa-arrow-up\"></i>\n      </a>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}