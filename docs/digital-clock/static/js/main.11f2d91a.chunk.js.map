{"version":3,"sources":["utils/clock.js","App.js","hooks/useInterval.js","serviceWorker.js","index.js"],"names":["ALL_DATE_FORMATS","clock","getRandomColor","Math","floor","random","toString","getRandomDarkColor","hex","String","slice","toUpperCase","replace","length","c","i","rgb","parseInt","substr","round","min","max","randDarkColor","getRandomClockFormat","moment","format","getDateFormat","maxFormats","App","useState","clockInfo","setClockInfo","setClockDetails","index","currentIndex","clockUtils","chnageDateFormat","style","color","background","info","ChangeHandler","useEffect","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAEMA,EAAmB,CAAC,WAAY,KAAM,MAAO,IAAK,IAAK,MAkB7D,IAaeC,EAPD,CACZC,eANqB,iBAAM,IAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,KAO/EC,mBANyB,kBAlB3B,WACI,IACIC,EAAMC,OAAO,IAAMN,KAAKE,SAASC,SAAS,IAAII,MAAM,EAAG,GAAGC,eAAeC,QAAQ,cAAe,IAChGJ,EAAIK,OAAS,IACbL,EAAMA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,IAE3D,IACIM,EAAGC,EADHC,EAAM,IAEV,IAAKD,EAAI,EAAGA,EAAI,EAAGA,IACfD,EAAIG,SAAST,EAAIU,OAAW,EAAJH,EAAO,GAAI,IAEnCC,IAAQ,MADRF,EAAIX,KAAKgB,MAAMhB,KAAKiB,IAAIjB,KAAKkB,IAAI,EAAGP,GAT5B,IASiCA,GAAW,MAAMR,SAAS,MACjDY,OAAOJ,EAAED,QAE/B,OAAOG,EAKsBM,IAO/BC,qBAN2B,SAACR,GAAD,OAAOS,MAASC,OAHvB,SAACV,GAAD,OAAOf,EAAiBe,IAAMf,EAAiB,GAGjB0B,CAAcX,KAOhEY,WAAY3B,EAAiBa,QCuBhBe,MAjDf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,KASPC,EAAkB,WACtB,IAAMC,EAPiB,WACvB,IAAIA,EAAQH,EAAUI,aAAe,GAAK,EAE1C,OADID,IAAUE,EAAWR,aAAYM,EAAQ,GACtCA,EAIOG,GACd,MAAO,CACLC,MAAO,CACLC,MAAOH,EAAWjC,iBAClBqC,WAAYJ,EAAW5B,sBAEzBiC,KAAML,EAAWZ,qBAAqBU,GACtCC,aAAcD,IAYlB,SAASQ,IAAkBV,EAAaC,KAMxC,OAJAU,qBAAU,kBAAMD,MAAiB,ICjCpB,SAAqBE,EAAUC,GAC5C,IAAMC,EAAgBC,mBAGtBJ,qBAAU,WACRG,EAAcE,QAAUJ,IACvB,CAACA,IAGJD,qBAAU,WAIR,GAAc,OAAVE,EAAgB,CAClB,IAAII,EAAKC,aAJX,WACEJ,EAAcE,YAGaH,GAC3B,OAAO,kBAAMM,cAAcF,OAE5B,CAACJ,IDkBJO,EAAY,kBAAMpB,EAXT,CACLM,MAAOP,EAAUO,MACjBG,KAAML,EAAWZ,qBAAqBO,EAAUI,cAChDA,aAAcJ,EAAUI,iBAQmB,KAG7C,yBAAKkB,UAAU,OACb,uBAAGJ,GAAG,eAAN,oCACA,yBAAKI,UAAU,SACb,yBAAKA,UAAU,SACf,yBAAKA,UAAU,aAAaf,MAAOP,EAAUO,MAAOgB,QAAS,kBAAMZ,MACjE,0BAAMW,UAAU,qBAAsBtB,EAAUU,WEjCtCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.11f2d91a.chunk.js","sourcesContent":["import moment from 'moment'\n\nconst ALL_DATE_FORMATS = ['HH:mm:ss', 'LT', 'LTS', 'L', 'l', 'LL'];\n\nfunction randDarkColor() {\n    const lum = -0.25;\n    let hex = String('#' + Math.random().toString(16).slice(2, 8).toUpperCase()).replace(/[^0-9a-f]/gi, '');\n    if (hex.length < 6) {\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    let rgb = \"#\",\n        c, i;\n    for (i = 0; i < 3; i++) {\n        c = parseInt(hex.substr(i * 2, 2), 16);\n        c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n        rgb += (\"00\" + c).substr(c.length);\n    }\n    return rgb;\n}\n\nconst getDateFormat = (i) => ALL_DATE_FORMATS[i] || ALL_DATE_FORMATS[0];\nconst getRandomColor = () => '#' + Math.floor(Math.random() * 16777215).toString(16);\nconst getRandomDarkColor = () => randDarkColor();\nconst getRandomClockFormat = (i) => moment().format(getDateFormat(i));\n\n\nconst clock = {\n  getRandomColor,\n  getRandomDarkColor,\n  getRandomClockFormat,\n  maxFormats: ALL_DATE_FORMATS.length,\n};\n\nexport default clock;","import React, { useState, useEffect } from 'react';\nimport clockUtils from './utils/clock';\nimport useInterval from './hooks/useInterval';\n\nfunction App() {\n  const [clockInfo, setClockInfo] = useState({});\n\n  const chnageDateFormat = () => {\n    let index = clockInfo.currentIndex + 1 || 0;\n    if (index === clockUtils.maxFormats) index = 0;\n    return index;\n  }\n\n  const setClockDetails = () => {\n    const index = chnageDateFormat();\n    return {\n      style: {\n        color: clockUtils.getRandomColor(),\n        background: clockUtils.getRandomDarkColor()\n      },\n      info: clockUtils.getRandomClockFormat(index),\n      currentIndex: index,\n    };\n  };\n\n  const refreshTime = () => {\n    return {\n      style: clockInfo.style,\n      info: clockUtils.getRandomClockFormat(clockInfo.currentIndex),\n      currentIndex: clockInfo.currentIndex,\n    };\n  }\n\n  function ChangeHandler() { setClockInfo(setClockDetails()); };\n\n  useEffect(() => ChangeHandler(), []);\n\n  useInterval(() => setClockInfo(refreshTime()), 1000);\n\n  return (\n    <div className=\"App\">\n      <p id=\"instruction\">Click on clock to change formats</p>\n      <div className=\"outer\">\n        <div className=\"inner\">\n        <div className=\"clock-dial\" style={clockInfo.style} onClick={() => ChangeHandler()}>\n          <span className=\"time unselectable\" >{clockInfo.info}</span>\n        </div>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}