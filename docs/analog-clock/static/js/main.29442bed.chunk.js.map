{"version":3,"sources":["App.js","hooks/useIntervel.js","serviceWorker.js","index.js"],"names":["App","useState","seconds","minutes","hours","ration","setRotation","setClock","currentDate","Date","getSeconds","getMinutes","getHours","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useIntervel","className","style","transform","Array","from","map","_","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAqDeA,MAjDf,WAAgB,IAAD,EACiBC,mBAAS,CAAEC,QAAS,EAAGC,QAAS,EAAGC,MAAO,IAD3D,mBACNC,EADM,KACEC,EADF,KAGb,SAASC,IACP,IAAMC,EAAc,IAAIC,KAClBP,EAAqC,EAA3BM,EAAYE,aACtBP,EAAqC,EAA3BK,EAAYG,aAEtBP,EAASI,EAAYI,WAAa,GAAM,GAC9CN,EAAY,CAAEJ,UAASC,UAASC,UAQlC,OCnBa,SAAqBS,EAAUC,GAC5C,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IDJJQ,EAAY,kBAAMf,MAAY,KAC9BU,qBAAU,WAER,OADAV,IACO,eACN,IAGD,yBAAKgB,UAAU,OACb,yBAAKA,UAAU,SACb,yBACEA,UAAU,YACVC,MAAO,CACLC,UAAU,2BAAD,OAA6BpB,EAAOD,MAApC,WAGb,yBACEmB,UAAU,cACVC,MAAO,CACLC,UAAU,2BAAD,OAA6BpB,EAAOF,QAApC,WAGb,yBACEoB,UAAU,cACVC,MAAO,CACLC,UAAU,2BAAD,OAA6BpB,EAAOH,QAApC,WAIZwB,MAAMC,KAAKD,MAAM,KAAKE,KAAI,SAACC,EAAGC,GAAJ,OACzB,yBAAKC,IAAKD,EAAOP,UAAS,uBAAkBO,EAAQ,IACjDA,EAAQ,SEjCDE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29442bed.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useIntervel from './hooks/useIntervel';\nimport './App.css';\n\nfunction App() {\n  const [ration, setRotation] = useState({ seconds: 0, minutes: 0, hours: 0 });\n\n  function setClock() {\n    const currentDate = new Date();\n    const seconds = currentDate.getSeconds() * 6; // per second move 6 deg\n    const minutes = currentDate.getMinutes() * 6; // per minute move 6 deg\n    // getHours will give in 24 hours mod 12 and then move 30 deg\n    const hours = (currentDate.getHours() % 12) * 30;\n    setRotation({ seconds, minutes, hours });\n  }\n  useIntervel(() => setClock(), 1000);\n  useEffect(() => {\n    setClock();\n    return () => {};\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"clock\">\n        <div\n          className=\"hand hour\"\n          style={{\n            transform: `translateX(-50%) rotate(${ration.hours}deg)`\n          }}\n        ></div>\n        <div\n          className=\"hand minute\"\n          style={{\n            transform: `translateX(-50%) rotate(${ration.minutes}deg)`\n          }}\n        ></div>\n        <div\n          className=\"hand second\"\n          style={{\n            transform: `translateX(-50%) rotate(${ration.seconds}deg)`\n          }}\n        ></div>\n\n        {Array.from(Array(12)).map((_, index) => (\n          <div key={index} className={`number number${index + 1}`}>\n            {index + 1}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}