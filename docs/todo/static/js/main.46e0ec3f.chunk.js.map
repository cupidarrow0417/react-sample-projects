{"version":3,"sources":["utils/grocery.js","components/groceryItem/groceryItem.js","App.js","serviceWorker.js","index.js"],"names":["get","localStorage","getItem","JSON","parse","getbyId","id","item","filter","i","length","edit","value","items","map","setItem","stringify","helpers","createOrUpdate","grocery","push","remove","clear","GroceryList","props","className","type","onClick","onClickEditListItem","onClickDeleteListItem","App","generateId","Date","getTime","useState","groceryUtils","groceryList","setGroceryList","currentItem","onSubmit","e","preventDefault","placeholder","onChange","target","listItem","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46e0ec3f.chunk.js","sourcesContent":["function get() {\n    return localStorage.getItem(\"list\") ? JSON.parse(localStorage.getItem(\"list\")) : []\n};\n\nfunction getbyId(id) {\n    const item = get().filter(i => i.id === id);\n    return (item && item.length) ? item[0] : {};\n};\n\nfunction edit(id, value) {\n    let items = get();\n    items = items.map(function (item) {\n        if (item.id === id) {\n            item.value = value;\n        }\n        return item;\n    });\n    localStorage.setItem(\"list\", JSON.stringify(items));\n}\n\nconst helpers = {\n    get,\n    getbyId,\n    createOrUpdate: (id, value) => {\n        const item = getbyId(id);\n        if (item && item.id) {\n            return edit(id, value);\n        }\n        const grocery = { id, value };\n        const items = get();\n        items.push(grocery);\n        localStorage.setItem(\"list\", JSON.stringify(items));\n    },\n    remove: (id) => {\n        let items = get();\n        items = items.filter((item) => (item.id !== id));\n        localStorage.setItem(\"list\", JSON.stringify(items));\n    },\n    edit,\n    clear: () => {\n        localStorage.setItem(\"list\", '');\n    }\n};\n\nexport default helpers;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction GroceryList(props) {\n    return (\n        <div className=\"grocery-list\">\n            <article className=\"grocery-item\">\n                <p className=\"title\">{props.item}</p>\n                <div className=\"btn-container\">\n                    <button\n                        type=\"button\"\n                        className=\"edit-btn\"\n                        onClick={() => props.onClickEditListItem(props.id)}>\n                        <i className=\"fas fa-edit\"></i>\n                    </button>\n                    <button\n                        type=\"button\"\n                        className=\"delete-btn\"\n                        onClick={() => props.onClickDeleteListItem(props.id)}>\n                        <i className=\"fas fa-trash\"></i>\n                    </button>\n                </div>\n            </article>\n        </div>\n    );\n}\n\nGroceryList.propTypes = {\n    id: PropTypes.number.isRequired,\n    item: PropTypes.string.isRequired,\n    onClickEditListItem: PropTypes.func.isRequired,\n    onClickDeleteListItem: PropTypes.func.isRequired,\n};\n\nexport default GroceryList;\n","import React, { useState } from 'react';\nimport groceryUtils from './utils/grocery';\nimport GroceryItem from './components/groceryItem/groceryItem';\n\nfunction App() {\n  const generateId = () => new Date().getTime();\n\n  const [groceryList, setGroceryList] = useState(groceryUtils.get());\n  const [item, setItem] = useState({ id: generateId(), value: '' });\n\n  const onClickDeleteListItem = (id) => {\n    groceryUtils.remove(id);\n    setGroceryList(groceryUtils.get());\n  };\n\n  const onClickEditListItem = (id) => {\n    const currentItem = groceryUtils.getbyId(id);\n    if (currentItem.id) {\n      setItem({ id: currentItem.id, value: currentItem.value });\n    }\n  };\n\n  const onclickAddListItem = (e) => {\n    e.preventDefault();\n    groceryUtils.createOrUpdate(item.id, item.value);\n    setItem({ id: generateId(), value: '' });\n    setGroceryList(groceryUtils.get());\n  };\n\n  const clearList = () => {\n    groceryUtils.clear();\n    setGroceryList(groceryUtils.get());\n  };\n\n  return (\n    <div>\n      <section className=\"section-center\">\n        <form className=\"grocery-form\" onSubmit={onclickAddListItem}>\n          <p className=\"alert\"></p>\n          <h3>Grocery Bud</h3>\n          <div className=\"form-control\">\n            <input type=\"text\"\n              id=\"grocery\"\n              placeholder=\"e.g. bread\"\n              value={item.value}\n              onChange={e => setItem({ id: item.id, value: e.target.value })} />\n            <button type=\"submit\" className=\"submit-btn\">\n              submit\n            </button>\n          </div>\n        </form>\n        <div className={`grocery-container ${groceryList.length ? 'show-container' : ''}`}>\n          {groceryList.map((listItem, key) =>\n            <GroceryItem\n              key={listItem.id}\n              id={listItem.id}\n              item={listItem.value}\n              onClickEditListItem={onClickEditListItem}\n              onClickDeleteListItem={onClickDeleteListItem}\n            />\n          )}\n          <button className=\"clear-btn\" onClick={clearList}>clear items</button>\n        </div>\n      </section>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}